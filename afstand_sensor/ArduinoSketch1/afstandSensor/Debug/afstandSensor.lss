
afstandSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  0000139e  00001432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000139e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b6  0080012e  0080012e  00001460  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  000014d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008016  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a07  00000000  00000000  000097e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c58  00000000  00000000  0000b1ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000089c  00000000  00000000  0000ce48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002045  00000000  00000000  0000d6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000321c  00000000  00000000  0000f729  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  00012945  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__vector_18>
      4c:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	73 05       	cpc	r23, r3

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	ee e9       	ldi	r30, 0x9E	; 158
      d8:	f3 e1       	ldi	r31, 0x13	; 19
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	ae 32       	cpi	r26, 0x2E	; 46
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	21 e0       	ldi	r18, 0x01	; 1
      e8:	ae e2       	ldi	r26, 0x2E	; 46
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a4 3e       	cpi	r26, 0xE4	; 228
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c2 e6       	ldi	r28, 0x62	; 98
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	21 97       	sbiw	r28, 0x01	; 1
     100:	fe 01       	movw	r30, r28
     102:	0e 94 c7 09 	call	0x138e	; 0x138e <__tablejump2__>
     106:	c1 36       	cpi	r28, 0x61	; 97
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 a1 05 	call	0xb42	; 0xb42 <main>
     110:	0c 94 cd 09 	jmp	0x139a	; 0x139a <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <countPulseASM>:

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
     118:	cf 92       	push	r12
    push r13   ;   ;  131 pushqi1/1 [length = 1]
     11a:	df 92       	push	r13
    push r14   ;   ;  132 pushqi1/1 [length = 1]
     11c:	ef 92       	push	r14
    push r15   ;   ;  133 pushqi1/1 [length = 1]
     11e:	ff 92       	push	r15
    push r16   ;   ;  134 pushqi1/1 [length = 1]
     120:	0f 93       	push	r16
    push r17   ;   ;  135 pushqi1/1 [length = 1]
     122:	1f 93       	push	r17
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
     124:	e8 2f       	mov	r30, r24
    mov r31,r25  ;  port, port
     126:	f9 2f       	mov	r31, r25
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
     128:	05 c0       	rjmp	.+10     	; 0x134 <countPulseASM+0x1c>
.L4:
/*         if (--maxloops == 0) */
.LM2:
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
     12a:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     12c:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     12e:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     130:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  19  branch  [length = 1]
     132:	61 f1       	breq	.+88     	; 0x18c <countPulseASM+0x74>
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
     134:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
     136:	96 23       	and	r25, r22
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
     138:	94 17       	cp	r25, r20
    breq .L4   ; ,   ;  26  branch  [length = 1]
     13a:	b9 f3       	breq	.-18     	; 0x12a <countPulseASM+0x12>
    rjmp .L6   ;   ;  184 jump  [length = 1]
     13c:	05 c0       	rjmp	.+10     	; 0x148 <countPulseASM+0x30>
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
     13e:	01 50       	subi	r16, 0x01	; 1
    sbc r17, r1   ;  maxloops
     140:	11 09       	sbc	r17, r1
    sbc r18, r1   ;  maxloops
     142:	21 09       	sbc	r18, r1
    sbc r19, r1   ;  maxloops
     144:	31 09       	sbc	r19, r1
    breq .L13  ; ,   ;  33  branch  [length = 1]
     146:	11 f1       	breq	.+68     	; 0x18c <countPulseASM+0x74>
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
     148:	90 81       	ld	r25, Z
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
     14a:	96 23       	and	r25, r22
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
     14c:	94 13       	cpse	r25, r20
    rjmp .L7   ;
     14e:	f7 cf       	rjmp	.-18     	; 0x13e <countPulseASM+0x26>
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
     150:	c1 2c       	mov	r12, r1
    mov r13, r1   ;  width
     152:	d1 2c       	mov	r13, r1
    mov r14, r1   ;  width
     154:	e1 2c       	mov	r14, r1
    mov r15, r1   ;  width
     156:	f1 2c       	mov	r15, r1
    rjmp .L9   ;   ;  186 jump  [length = 1]
     158:	0a c0       	rjmp	.+20     	; 0x16e <countPulseASM+0x56>
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
     15a:	8f ef       	ldi	r24, 0xFF	; 255
    sub r12,r24  ;  width,
     15c:	c8 1a       	sub	r12, r24
    sbc r13,r24  ;  width,
     15e:	d8 0a       	sbc	r13, r24
    sbc r14,r24  ;  width,
     160:	e8 0a       	sbc	r14, r24
    sbc r15,r24  ;  width,
     162:	f8 0a       	sbc	r15, r24
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
     164:	0c 15       	cp	r16, r12
    cpc r17,r13  ;  maxloops, width
     166:	1d 05       	cpc	r17, r13
    cpc r18,r14  ;  maxloops, width
     168:	2e 05       	cpc	r18, r14
    cpc r19,r15  ;  maxloops, width
     16a:	3f 05       	cpc	r19, r15
    breq .L13  ; ,   ;  52  branch  [length = 1]
     16c:	79 f0       	breq	.+30     	; 0x18c <countPulseASM+0x74>
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
     16e:	80 81       	ld	r24, Z
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
     170:	86 23       	and	r24, r22
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
     172:	84 17       	cp	r24, r20
    breq .L10  ; ,   ;  64  branch  [length = 1]
     174:	91 f3       	breq	.-28     	; 0x15a <countPulseASM+0x42>
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
     176:	6c 2d       	mov	r22, r12
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
     178:	7d 2d       	mov	r23, r13
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
     17a:	8e 2d       	mov	r24, r14
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
     17c:	9f 2d       	mov	r25, r15
/* epilogue start */
.LM9:
    pop r17  ;   ;  171 popqi [length = 1]
     17e:	1f 91       	pop	r17
    pop r16  ;   ;  172 popqi [length = 1]
     180:	0f 91       	pop	r16
    pop r15  ;   ;  173 popqi [length = 1]
     182:	ff 90       	pop	r15
    pop r14  ;   ;  174 popqi [length = 1]
     184:	ef 90       	pop	r14
    pop r13  ;   ;  175 popqi [length = 1]
     186:	df 90       	pop	r13
    pop r12  ;   ;  176 popqi [length = 1]
     188:	cf 90       	pop	r12
    ret  ;  177 return_from_epilogue  [length = 1]
     18a:	08 95       	ret
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
     18c:	60 e0       	ldi	r22, 0x00	; 0
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
     18e:	70 e0       	ldi	r23, 0x00	; 0
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
     190:	80 e0       	ldi	r24, 0x00	; 0
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
     192:	90 e0       	ldi	r25, 0x00	; 0
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
     194:	1f 91       	pop	r17
    pop r16  ;   ;  139 popqi [length = 1]
     196:	0f 91       	pop	r16
    pop r15  ;   ;  140 popqi [length = 1]
     198:	ff 90       	pop	r15
    pop r14  ;   ;  141 popqi [length = 1]
     19a:	ef 90       	pop	r14
    pop r13  ;   ;  142 popqi [length = 1]
     19c:	df 90       	pop	r13
    pop r12  ;   ;  143 popqi [length = 1]
     19e:	cf 90       	pop	r12
    ret  ;  144 return_from_epilogue  [length = 1]
     1a0:	08 95       	ret

000001a2 <setup>:
int echoPin = 12;
int triggerPin = 13;


void setup() {
  pinMode(ledPinGroen, OUTPUT);
     1a2:	61 e0       	ldi	r22, 0x01	; 1
     1a4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ledPinGroen>
     1a8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <pinMode>
  pinMode(ledPinGeel, OUTPUT);
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ledPinGeel>
     1b2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <pinMode>
  pinMode(ledPinRood, OUTPUT);
     1b6:	61 e0       	ldi	r22, 0x01	; 1
     1b8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ledPinRood>
     1bc:	0e 94 61 08 	call	0x10c2	; 0x10c2 <pinMode>
  pinMode(echoPin, INPUT);
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <echoPin>
     1c6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <pinMode>
  pinMode(triggerPin, OUTPUT);
     1ca:	61 e0       	ldi	r22, 0x01	; 1
     1cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     1d0:	0e 94 61 08 	call	0x10c2	; 0x10c2 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     1d4:	26 e0       	ldi	r18, 0x06	; 6
     1d6:	40 e8       	ldi	r20, 0x80	; 128
     1d8:	55 e2       	ldi	r21, 0x25	; 37
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	8e e3       	ldi	r24, 0x3E	; 62
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	0c 94 ac 04 	jmp	0x958	; 0x958 <_ZN14HardwareSerial5beginEmh>

000001e6 <_Z11meetAfstandv>:

 }
 delay(500);
}
//functie om de afstand sensor te besturen, de waarde uit te lezen, en de afstant te berekenen
double meetAfstand(){
     1e6:	cf 92       	push	r12
     1e8:	df 92       	push	r13
     1ea:	ef 92       	push	r14
     1ec:	ff 92       	push	r15
    // Om zeker te zijn dat triggerPin LOW is.
    digitalWrite(triggerPin, LOW);
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     1f4:	0e 94 9d 08 	call	0x113a	; 0x113a <digitalWrite>
    delayMicroseconds(2);
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <delayMicroseconds>
    // Hou de trigger 10 microseconden in, dit is het signaal om de sensor te laaten meten.
    digitalWrite(triggerPin, HIGH);
     200:	61 e0       	ldi	r22, 0x01	; 1
     202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     206:	0e 94 9d 08 	call	0x113a	; 0x113a <digitalWrite>
    delayMicroseconds(10);
     20a:	8a e0       	ldi	r24, 0x0A	; 10
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <delayMicroseconds>
    digitalWrite(triggerPin, LOW);
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     218:	0e 94 9d 08 	call	0x113a	; 0x113a <digitalWrite>
    // lezen van de tijd en het berekenen van de aftand
    durationMicroSec = pulseIn(echoPin, HIGH);
     21c:	20 e4       	ldi	r18, 0x40	; 64
     21e:	32 e4       	ldi	r19, 0x42	; 66
     220:	4f e0       	ldi	r20, 0x0F	; 15
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <echoPin>
     22a:	0e 94 cc 08 	call	0x1198	; 0x1198 <pulseIn>
     22e:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <__data_end>
     232:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <__data_end+0x1>
     236:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end+0x2>
     23a:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x3>
    distanceCm = durationMicroSec / 2.0 * 0.0343;
     23e:	0e 94 ac 02 	call	0x558	; 0x558 <__floatunsisf>
     242:	20 e0       	ldi	r18, 0x00	; 0
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	5f e3       	ldi	r21, 0x3F	; 63
     24a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__mulsf3>
     24e:	28 e2       	ldi	r18, 0x28	; 40
     250:	3e e7       	ldi	r19, 0x7E	; 126
     252:	4c e0       	ldi	r20, 0x0C	; 12
     254:	5d e3       	ldi	r21, 0x3D	; 61
     256:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__mulsf3>
     25a:	6b 01       	movw	r12, r22
     25c:	7c 01       	movw	r14, r24
     25e:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <distanceCm>
     262:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <distanceCm+0x1>
     266:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <distanceCm+0x2>
     26a:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <distanceCm+0x3>
    if (distanceCm == 0 || distanceCm > 400) {
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	a9 01       	movw	r20, r18
     274:	0e 94 a7 02 	call	0x54e	; 0x54e <__cmpsf2>
     278:	88 23       	and	r24, r24
     27a:	51 f0       	breq	.+20     	; 0x290 <_Z11meetAfstandv+0xaa>
     27c:	20 e0       	ldi	r18, 0x00	; 0
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	48 ec       	ldi	r20, 0xC8	; 200
     282:	53 e4       	ldi	r21, 0x43	; 67
     284:	c7 01       	movw	r24, r14
     286:	b6 01       	movw	r22, r12
     288:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__gesf2>
     28c:	18 16       	cp	r1, r24
     28e:	34 f4       	brge	.+12     	; 0x29c <_Z11meetAfstandv+0xb6>
        return(-1.0) ;
     290:	c1 2c       	mov	r12, r1
     292:	d1 2c       	mov	r13, r1
     294:	80 e8       	ldi	r24, 0x80	; 128
     296:	e8 2e       	mov	r14, r24
     298:	8f eb       	ldi	r24, 0xBF	; 191
     29a:	f8 2e       	mov	r15, r24
    } 
    else {
        return(distanceCm);
    }
}
     29c:	c7 01       	movw	r24, r14
     29e:	b6 01       	movw	r22, r12
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	df 90       	pop	r13
     2a6:	cf 90       	pop	r12
     2a8:	08 95       	ret

000002aa <loop>:
  pinMode(triggerPin, OUTPUT);
 
  Serial.begin(9600);
}

void loop() {
     2aa:	8f 92       	push	r8
     2ac:	9f 92       	push	r9
     2ae:	af 92       	push	r10
     2b0:	bf 92       	push	r11
     2b2:	cf 92       	push	r12
     2b4:	df 92       	push	r13
     2b6:	ef 92       	push	r14
     2b8:	ff 92       	push	r15
  meet1 = meetAfstand();
     2ba:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z11meetAfstandv>
     2be:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <meet1>
     2c2:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <meet1+0x1>
     2c6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <meet1+0x2>
     2ca:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <meet1+0x3>
  delay(2000);
     2ce:	60 ed       	ldi	r22, 0xD0	; 208
     2d0:	77 e0       	ldi	r23, 0x07	; 7
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <delay>
  meet2 = meetAfstand();
     2da:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z11meetAfstandv>
     2de:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <meet2>
     2e2:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <meet2+0x1>
     2e6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <meet2+0x2>
     2ea:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <meet2+0x3>
  Serial.print(meet1);
     2ee:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <meet1>
     2f2:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <meet1+0x1>
     2f6:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <meet1+0x2>
     2fa:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <meet1+0x3>
     2fe:	22 e0       	ldi	r18, 0x02	; 2
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	8e e3       	ldi	r24, 0x3E	; 62
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	0e 94 33 07 	call	0xe66	; 0xe66 <_ZN5Print5printEdi>
  Serial.print("  ");
     30a:	6a e0       	ldi	r22, 0x0A	; 10
     30c:	71 e0       	ldi	r23, 0x01	; 1
     30e:	8e e3       	ldi	r24, 0x3E	; 62
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN5Print5printEPKc>
  Serial.println(meet2); 
     316:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <meet2>
     31a:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <meet2+0x1>
     31e:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <meet2+0x2>
     322:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <meet2+0x3>
     326:	22 e0       	ldi	r18, 0x02	; 2
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	8e e3       	ldi	r24, 0x3E	; 62
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	0e 94 35 07 	call	0xe6a	; 0xe6a <_ZN5Print7printlnEdi>
  // er is geen foute waarde gevonden
  if(meet1 != -1 && meet2 != -1){
     332:	c0 90 3a 01 	lds	r12, 0x013A	; 0x80013a <meet1>
     336:	d0 90 3b 01 	lds	r13, 0x013B	; 0x80013b <meet1+0x1>
     33a:	e0 90 3c 01 	lds	r14, 0x013C	; 0x80013c <meet1+0x2>
     33e:	f0 90 3d 01 	lds	r15, 0x013D	; 0x80013d <meet1+0x3>
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e8       	ldi	r20, 0x80	; 128
     348:	5f eb       	ldi	r21, 0xBF	; 191
     34a:	c7 01       	movw	r24, r14
     34c:	b6 01       	movw	r22, r12
     34e:	0e 94 a7 02 	call	0x54e	; 0x54e <__cmpsf2>
     352:	88 23       	and	r24, r24
     354:	09 f4       	brne	.+2      	; 0x358 <loop+0xae>
     356:	4a c0       	rjmp	.+148    	; 0x3ec <loop+0x142>
     358:	80 90 36 01 	lds	r8, 0x0136	; 0x800136 <meet2>
     35c:	90 90 37 01 	lds	r9, 0x0137	; 0x800137 <meet2+0x1>
     360:	a0 90 38 01 	lds	r10, 0x0138	; 0x800138 <meet2+0x2>
     364:	b0 90 39 01 	lds	r11, 0x0139	; 0x800139 <meet2+0x3>
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	40 e8       	ldi	r20, 0x80	; 128
     36e:	5f eb       	ldi	r21, 0xBF	; 191
     370:	c5 01       	movw	r24, r10
     372:	b4 01       	movw	r22, r8
     374:	0e 94 a7 02 	call	0x54e	; 0x54e <__cmpsf2>
     378:	88 23       	and	r24, r24
     37a:	c1 f1       	breq	.+112    	; 0x3ec <loop+0x142>
        return(distanceCm);
    }
}
//functie om te controleren of de waarden dicht bij elkaar liggen
bool ongeveerGelijk(double var1,double var2){
  if(var1-2<var2&&var1+2>var2){
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e0       	ldi	r20, 0x00	; 0
     382:	50 e4       	ldi	r21, 0x40	; 64
     384:	c7 01       	movw	r24, r14
     386:	b6 01       	movw	r22, r12
     388:	0e 94 3a 02 	call	0x474	; 0x474 <__subsf3>
     38c:	9b 01       	movw	r18, r22
     38e:	ac 01       	movw	r20, r24
     390:	c5 01       	movw	r24, r10
     392:	b4 01       	movw	r22, r8
     394:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__gesf2>
     398:	18 16       	cp	r1, r24
     39a:	b4 f5       	brge	.+108    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	40 e0       	ldi	r20, 0x00	; 0
     3a2:	50 e4       	ldi	r21, 0x40	; 64
     3a4:	c7 01       	movw	r24, r14
     3a6:	b6 01       	movw	r22, r12
     3a8:	0e 94 3b 02 	call	0x476	; 0x476 <__addsf3>
     3ac:	9b 01       	movw	r18, r22
     3ae:	ac 01       	movw	r20, r24
     3b0:	c5 01       	movw	r24, r10
     3b2:	b4 01       	movw	r22, r8
     3b4:	0e 94 a7 02 	call	0x54e	; 0x54e <__cmpsf2>
     3b8:	87 fd       	sbrc	r24, 7
     3ba:	4b c0       	rjmp	.+150    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     3bc:	25 c0       	rjmp	.+74     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
      //het luik gaat omhoog
      digitalWrite(ledPinGroen,HIGH);
      digitalWrite(ledPinGeel,HIGH);
      digitalWrite(ledPinRood,LOW);
      }
    else if(meet1<meet2){
     3be:	a5 01       	movw	r20, r10
     3c0:	94 01       	movw	r18, r8
     3c2:	c7 01       	movw	r24, r14
     3c4:	b6 01       	movw	r22, r12
     3c6:	0e 94 a7 02 	call	0x54e	; 0x54e <__cmpsf2>
     3ca:	87 ff       	sbrs	r24, 7
     3cc:	0f c0       	rjmp	.+30     	; 0x3ec <loop+0x142>
      //het luik gaat omlaag
      digitalWrite(ledPinGroen,LOW);
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ledPinGroen>
     3d4:	0e 94 9d 08 	call	0x113a	; 0x113a <digitalWrite>
      digitalWrite(ledPinGeel,HIGH);
     3d8:	61 e0       	ldi	r22, 0x01	; 1
  // het luik beweegt niet
  else{
    if(meet1<30){
      //het luik is omlaag
      digitalWrite(ledPinGroen,LOW);
      digitalWrite(ledPinGeel,LOW);
     3da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ledPinGeel>
     3de:	0e 94 9d 08 	call	0x113a	; 0x113a <digitalWrite>
      digitalWrite(ledPinRood,HIGH);
     3e2:	61 e0       	ldi	r22, 0x01	; 1
      }
     else if(meet1>120){
      //het luik is omhoog
      digitalWrite(ledPinGroen,HIGH);
      digitalWrite(ledPinGeel,LOW);
      digitalWrite(ledPinRood,LOW);
     3e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ledPinRood>
     3e8:	0e 94 9d 08 	call	0x113a	; 0x113a <digitalWrite>
    }
   }

 }
 delay(500);
     3ec:	64 ef       	ldi	r22, 0xF4	; 244
     3ee:	71 e0       	ldi	r23, 0x01	; 1
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
}
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	bf 90       	pop	r11
     3fe:	af 90       	pop	r10
     400:	9f 90       	pop	r9
     402:	8f 90       	pop	r8
      digitalWrite(ledPinRood,LOW);
    }
   }

 }
 delay(500);
     404:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <delay>
  Serial.println(meet2); 
  // er is geen foute waarde gevonden
  if(meet1 != -1 && meet2 != -1){
  //het luik beweegt
  if(!ongeveerGelijk(meet1,meet2)){
    if(meet1<meet2){
     408:	a5 01       	movw	r20, r10
     40a:	94 01       	movw	r18, r8
     40c:	c7 01       	movw	r24, r14
     40e:	b6 01       	movw	r22, r12
     410:	0e 94 a7 02 	call	0x54e	; 0x54e <__cmpsf2>
     414:	87 ff       	sbrs	r24, 7
     416:	d3 cf       	rjmp	.-90     	; 0x3be <loop+0x114>
      //het luik gaat omhoog
      digitalWrite(ledPinGroen,HIGH);
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ledPinGroen>
     41e:	0e 94 9d 08 	call	0x113a	; 0x113a <digitalWrite>
      digitalWrite(ledPinGeel,HIGH);
     422:	61 e0       	ldi	r22, 0x01	; 1
     424:	10 c0       	rjmp	.+32     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
      //het luik is omlaag
      digitalWrite(ledPinGroen,LOW);
      digitalWrite(ledPinGeel,LOW);
      digitalWrite(ledPinRood,HIGH);
      }
     else if(meet1>120){
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 ef       	ldi	r20, 0xF0	; 240
     42c:	52 e4       	ldi	r21, 0x42	; 66
     42e:	c7 01       	movw	r24, r14
     430:	b6 01       	movw	r22, r12
     432:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__gesf2>
     436:	18 16       	cp	r1, r24
     438:	cc f6       	brge	.-78     	; 0x3ec <loop+0x142>
      //het luik is omhoog
      digitalWrite(ledPinGroen,HIGH);
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ledPinGroen>
     440:	0e 94 9d 08 	call	0x113a	; 0x113a <digitalWrite>
      digitalWrite(ledPinGeel,LOW);
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ledPinGeel>
     44a:	0e 94 9d 08 	call	0x113a	; 0x113a <digitalWrite>
      digitalWrite(ledPinRood,LOW);
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	c9 cf       	rjmp	.-110    	; 0x3e4 <loop+0x13a>
      digitalWrite(ledPinRood,HIGH);
      }
  }
  // het luik beweegt niet
  else{
    if(meet1<30){
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	40 ef       	ldi	r20, 0xF0	; 240
     458:	51 e4       	ldi	r21, 0x41	; 65
     45a:	c7 01       	movw	r24, r14
     45c:	b6 01       	movw	r22, r12
     45e:	0e 94 a7 02 	call	0x54e	; 0x54e <__cmpsf2>
     462:	87 ff       	sbrs	r24, 7
     464:	e0 cf       	rjmp	.-64     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
      //het luik is omlaag
      digitalWrite(ledPinGroen,LOW);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ledPinGroen>
     46c:	0e 94 9d 08 	call	0x113a	; 0x113a <digitalWrite>
      digitalWrite(ledPinGeel,LOW);
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	b3 cf       	rjmp	.-154    	; 0x3da <loop+0x130>

00000474 <__subsf3>:
     474:	50 58       	subi	r21, 0x80	; 128

00000476 <__addsf3>:
     476:	bb 27       	eor	r27, r27
     478:	aa 27       	eor	r26, r26
     47a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__addsf3x>
     47e:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_round>
     482:	0e 94 16 03 	call	0x62c	; 0x62c <__fp_pscA>
     486:	38 f0       	brcs	.+14     	; 0x496 <__addsf3+0x20>
     488:	0e 94 1d 03 	call	0x63a	; 0x63a <__fp_pscB>
     48c:	20 f0       	brcs	.+8      	; 0x496 <__addsf3+0x20>
     48e:	39 f4       	brne	.+14     	; 0x49e <__addsf3+0x28>
     490:	9f 3f       	cpi	r25, 0xFF	; 255
     492:	19 f4       	brne	.+6      	; 0x49a <__addsf3+0x24>
     494:	26 f4       	brtc	.+8      	; 0x49e <__addsf3+0x28>
     496:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_nan>
     49a:	0e f4       	brtc	.+2      	; 0x49e <__addsf3+0x28>
     49c:	e0 95       	com	r30
     49e:	e7 fb       	bst	r30, 7
     4a0:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_inf>

000004a4 <__addsf3x>:
     4a4:	e9 2f       	mov	r30, r25
     4a6:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_split3>
     4aa:	58 f3       	brcs	.-42     	; 0x482 <__addsf3+0xc>
     4ac:	ba 17       	cp	r27, r26
     4ae:	62 07       	cpc	r22, r18
     4b0:	73 07       	cpc	r23, r19
     4b2:	84 07       	cpc	r24, r20
     4b4:	95 07       	cpc	r25, r21
     4b6:	20 f0       	brcs	.+8      	; 0x4c0 <__addsf3x+0x1c>
     4b8:	79 f4       	brne	.+30     	; 0x4d8 <__addsf3x+0x34>
     4ba:	a6 f5       	brtc	.+104    	; 0x524 <__addsf3x+0x80>
     4bc:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_zero>
     4c0:	0e f4       	brtc	.+2      	; 0x4c4 <__addsf3x+0x20>
     4c2:	e0 95       	com	r30
     4c4:	0b 2e       	mov	r0, r27
     4c6:	ba 2f       	mov	r27, r26
     4c8:	a0 2d       	mov	r26, r0
     4ca:	0b 01       	movw	r0, r22
     4cc:	b9 01       	movw	r22, r18
     4ce:	90 01       	movw	r18, r0
     4d0:	0c 01       	movw	r0, r24
     4d2:	ca 01       	movw	r24, r20
     4d4:	a0 01       	movw	r20, r0
     4d6:	11 24       	eor	r1, r1
     4d8:	ff 27       	eor	r31, r31
     4da:	59 1b       	sub	r21, r25
     4dc:	99 f0       	breq	.+38     	; 0x504 <__addsf3x+0x60>
     4de:	59 3f       	cpi	r21, 0xF9	; 249
     4e0:	50 f4       	brcc	.+20     	; 0x4f6 <__addsf3x+0x52>
     4e2:	50 3e       	cpi	r21, 0xE0	; 224
     4e4:	68 f1       	brcs	.+90     	; 0x540 <__addsf3x+0x9c>
     4e6:	1a 16       	cp	r1, r26
     4e8:	f0 40       	sbci	r31, 0x00	; 0
     4ea:	a2 2f       	mov	r26, r18
     4ec:	23 2f       	mov	r18, r19
     4ee:	34 2f       	mov	r19, r20
     4f0:	44 27       	eor	r20, r20
     4f2:	58 5f       	subi	r21, 0xF8	; 248
     4f4:	f3 cf       	rjmp	.-26     	; 0x4dc <__addsf3x+0x38>
     4f6:	46 95       	lsr	r20
     4f8:	37 95       	ror	r19
     4fa:	27 95       	ror	r18
     4fc:	a7 95       	ror	r26
     4fe:	f0 40       	sbci	r31, 0x00	; 0
     500:	53 95       	inc	r21
     502:	c9 f7       	brne	.-14     	; 0x4f6 <__addsf3x+0x52>
     504:	7e f4       	brtc	.+30     	; 0x524 <__addsf3x+0x80>
     506:	1f 16       	cp	r1, r31
     508:	ba 0b       	sbc	r27, r26
     50a:	62 0b       	sbc	r22, r18
     50c:	73 0b       	sbc	r23, r19
     50e:	84 0b       	sbc	r24, r20
     510:	ba f0       	brmi	.+46     	; 0x540 <__addsf3x+0x9c>
     512:	91 50       	subi	r25, 0x01	; 1
     514:	a1 f0       	breq	.+40     	; 0x53e <__addsf3x+0x9a>
     516:	ff 0f       	add	r31, r31
     518:	bb 1f       	adc	r27, r27
     51a:	66 1f       	adc	r22, r22
     51c:	77 1f       	adc	r23, r23
     51e:	88 1f       	adc	r24, r24
     520:	c2 f7       	brpl	.-16     	; 0x512 <__addsf3x+0x6e>
     522:	0e c0       	rjmp	.+28     	; 0x540 <__addsf3x+0x9c>
     524:	ba 0f       	add	r27, r26
     526:	62 1f       	adc	r22, r18
     528:	73 1f       	adc	r23, r19
     52a:	84 1f       	adc	r24, r20
     52c:	48 f4       	brcc	.+18     	; 0x540 <__addsf3x+0x9c>
     52e:	87 95       	ror	r24
     530:	77 95       	ror	r23
     532:	67 95       	ror	r22
     534:	b7 95       	ror	r27
     536:	f7 95       	ror	r31
     538:	9e 3f       	cpi	r25, 0xFE	; 254
     53a:	08 f0       	brcs	.+2      	; 0x53e <__addsf3x+0x9a>
     53c:	b0 cf       	rjmp	.-160    	; 0x49e <__addsf3+0x28>
     53e:	93 95       	inc	r25
     540:	88 0f       	add	r24, r24
     542:	08 f0       	brcs	.+2      	; 0x546 <__addsf3x+0xa2>
     544:	99 27       	eor	r25, r25
     546:	ee 0f       	add	r30, r30
     548:	97 95       	ror	r25
     54a:	87 95       	ror	r24
     54c:	08 95       	ret

0000054e <__cmpsf2>:
     54e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fp_cmp>
     552:	08 f4       	brcc	.+2      	; 0x556 <__cmpsf2+0x8>
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	08 95       	ret

00000558 <__floatunsisf>:
     558:	e8 94       	clt
     55a:	09 c0       	rjmp	.+18     	; 0x56e <__floatsisf+0x12>

0000055c <__floatsisf>:
     55c:	97 fb       	bst	r25, 7
     55e:	3e f4       	brtc	.+14     	; 0x56e <__floatsisf+0x12>
     560:	90 95       	com	r25
     562:	80 95       	com	r24
     564:	70 95       	com	r23
     566:	61 95       	neg	r22
     568:	7f 4f       	sbci	r23, 0xFF	; 255
     56a:	8f 4f       	sbci	r24, 0xFF	; 255
     56c:	9f 4f       	sbci	r25, 0xFF	; 255
     56e:	99 23       	and	r25, r25
     570:	a9 f0       	breq	.+42     	; 0x59c <__floatsisf+0x40>
     572:	f9 2f       	mov	r31, r25
     574:	96 e9       	ldi	r25, 0x96	; 150
     576:	bb 27       	eor	r27, r27
     578:	93 95       	inc	r25
     57a:	f6 95       	lsr	r31
     57c:	87 95       	ror	r24
     57e:	77 95       	ror	r23
     580:	67 95       	ror	r22
     582:	b7 95       	ror	r27
     584:	f1 11       	cpse	r31, r1
     586:	f8 cf       	rjmp	.-16     	; 0x578 <__floatsisf+0x1c>
     588:	fa f4       	brpl	.+62     	; 0x5c8 <__floatsisf+0x6c>
     58a:	bb 0f       	add	r27, r27
     58c:	11 f4       	brne	.+4      	; 0x592 <__floatsisf+0x36>
     58e:	60 ff       	sbrs	r22, 0
     590:	1b c0       	rjmp	.+54     	; 0x5c8 <__floatsisf+0x6c>
     592:	6f 5f       	subi	r22, 0xFF	; 255
     594:	7f 4f       	sbci	r23, 0xFF	; 255
     596:	8f 4f       	sbci	r24, 0xFF	; 255
     598:	9f 4f       	sbci	r25, 0xFF	; 255
     59a:	16 c0       	rjmp	.+44     	; 0x5c8 <__floatsisf+0x6c>
     59c:	88 23       	and	r24, r24
     59e:	11 f0       	breq	.+4      	; 0x5a4 <__floatsisf+0x48>
     5a0:	96 e9       	ldi	r25, 0x96	; 150
     5a2:	11 c0       	rjmp	.+34     	; 0x5c6 <__floatsisf+0x6a>
     5a4:	77 23       	and	r23, r23
     5a6:	21 f0       	breq	.+8      	; 0x5b0 <__floatsisf+0x54>
     5a8:	9e e8       	ldi	r25, 0x8E	; 142
     5aa:	87 2f       	mov	r24, r23
     5ac:	76 2f       	mov	r23, r22
     5ae:	05 c0       	rjmp	.+10     	; 0x5ba <__floatsisf+0x5e>
     5b0:	66 23       	and	r22, r22
     5b2:	71 f0       	breq	.+28     	; 0x5d0 <__floatsisf+0x74>
     5b4:	96 e8       	ldi	r25, 0x86	; 134
     5b6:	86 2f       	mov	r24, r22
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	2a f0       	brmi	.+10     	; 0x5c8 <__floatsisf+0x6c>
     5be:	9a 95       	dec	r25
     5c0:	66 0f       	add	r22, r22
     5c2:	77 1f       	adc	r23, r23
     5c4:	88 1f       	adc	r24, r24
     5c6:	da f7       	brpl	.-10     	; 0x5be <__floatsisf+0x62>
     5c8:	88 0f       	add	r24, r24
     5ca:	96 95       	lsr	r25
     5cc:	87 95       	ror	r24
     5ce:	97 f9       	bld	r25, 7
     5d0:	08 95       	ret

000005d2 <__fp_cmp>:
     5d2:	99 0f       	add	r25, r25
     5d4:	00 08       	sbc	r0, r0
     5d6:	55 0f       	add	r21, r21
     5d8:	aa 0b       	sbc	r26, r26
     5da:	e0 e8       	ldi	r30, 0x80	; 128
     5dc:	fe ef       	ldi	r31, 0xFE	; 254
     5de:	16 16       	cp	r1, r22
     5e0:	17 06       	cpc	r1, r23
     5e2:	e8 07       	cpc	r30, r24
     5e4:	f9 07       	cpc	r31, r25
     5e6:	c0 f0       	brcs	.+48     	; 0x618 <__fp_cmp+0x46>
     5e8:	12 16       	cp	r1, r18
     5ea:	13 06       	cpc	r1, r19
     5ec:	e4 07       	cpc	r30, r20
     5ee:	f5 07       	cpc	r31, r21
     5f0:	98 f0       	brcs	.+38     	; 0x618 <__fp_cmp+0x46>
     5f2:	62 1b       	sub	r22, r18
     5f4:	73 0b       	sbc	r23, r19
     5f6:	84 0b       	sbc	r24, r20
     5f8:	95 0b       	sbc	r25, r21
     5fa:	39 f4       	brne	.+14     	; 0x60a <__fp_cmp+0x38>
     5fc:	0a 26       	eor	r0, r26
     5fe:	61 f0       	breq	.+24     	; 0x618 <__fp_cmp+0x46>
     600:	23 2b       	or	r18, r19
     602:	24 2b       	or	r18, r20
     604:	25 2b       	or	r18, r21
     606:	21 f4       	brne	.+8      	; 0x610 <__fp_cmp+0x3e>
     608:	08 95       	ret
     60a:	0a 26       	eor	r0, r26
     60c:	09 f4       	brne	.+2      	; 0x610 <__fp_cmp+0x3e>
     60e:	a1 40       	sbci	r26, 0x01	; 1
     610:	a6 95       	lsr	r26
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	81 1d       	adc	r24, r1
     616:	81 1d       	adc	r24, r1
     618:	08 95       	ret

0000061a <__fp_inf>:
     61a:	97 f9       	bld	r25, 7
     61c:	9f 67       	ori	r25, 0x7F	; 127
     61e:	80 e8       	ldi	r24, 0x80	; 128
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	08 95       	ret

00000626 <__fp_nan>:
     626:	9f ef       	ldi	r25, 0xFF	; 255
     628:	80 ec       	ldi	r24, 0xC0	; 192
     62a:	08 95       	ret

0000062c <__fp_pscA>:
     62c:	00 24       	eor	r0, r0
     62e:	0a 94       	dec	r0
     630:	16 16       	cp	r1, r22
     632:	17 06       	cpc	r1, r23
     634:	18 06       	cpc	r1, r24
     636:	09 06       	cpc	r0, r25
     638:	08 95       	ret

0000063a <__fp_pscB>:
     63a:	00 24       	eor	r0, r0
     63c:	0a 94       	dec	r0
     63e:	12 16       	cp	r1, r18
     640:	13 06       	cpc	r1, r19
     642:	14 06       	cpc	r1, r20
     644:	05 06       	cpc	r0, r21
     646:	08 95       	ret

00000648 <__fp_round>:
     648:	09 2e       	mov	r0, r25
     64a:	03 94       	inc	r0
     64c:	00 0c       	add	r0, r0
     64e:	11 f4       	brne	.+4      	; 0x654 <__fp_round+0xc>
     650:	88 23       	and	r24, r24
     652:	52 f0       	brmi	.+20     	; 0x668 <__fp_round+0x20>
     654:	bb 0f       	add	r27, r27
     656:	40 f4       	brcc	.+16     	; 0x668 <__fp_round+0x20>
     658:	bf 2b       	or	r27, r31
     65a:	11 f4       	brne	.+4      	; 0x660 <__fp_round+0x18>
     65c:	60 ff       	sbrs	r22, 0
     65e:	04 c0       	rjmp	.+8      	; 0x668 <__fp_round+0x20>
     660:	6f 5f       	subi	r22, 0xFF	; 255
     662:	7f 4f       	sbci	r23, 0xFF	; 255
     664:	8f 4f       	sbci	r24, 0xFF	; 255
     666:	9f 4f       	sbci	r25, 0xFF	; 255
     668:	08 95       	ret

0000066a <__fp_split3>:
     66a:	57 fd       	sbrc	r21, 7
     66c:	90 58       	subi	r25, 0x80	; 128
     66e:	44 0f       	add	r20, r20
     670:	55 1f       	adc	r21, r21
     672:	59 f0       	breq	.+22     	; 0x68a <__fp_splitA+0x10>
     674:	5f 3f       	cpi	r21, 0xFF	; 255
     676:	71 f0       	breq	.+28     	; 0x694 <__fp_splitA+0x1a>
     678:	47 95       	ror	r20

0000067a <__fp_splitA>:
     67a:	88 0f       	add	r24, r24
     67c:	97 fb       	bst	r25, 7
     67e:	99 1f       	adc	r25, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__fp_splitA+0x20>
     682:	9f 3f       	cpi	r25, 0xFF	; 255
     684:	79 f0       	breq	.+30     	; 0x6a4 <__fp_splitA+0x2a>
     686:	87 95       	ror	r24
     688:	08 95       	ret
     68a:	12 16       	cp	r1, r18
     68c:	13 06       	cpc	r1, r19
     68e:	14 06       	cpc	r1, r20
     690:	55 1f       	adc	r21, r21
     692:	f2 cf       	rjmp	.-28     	; 0x678 <__fp_split3+0xe>
     694:	46 95       	lsr	r20
     696:	f1 df       	rcall	.-30     	; 0x67a <__fp_splitA>
     698:	08 c0       	rjmp	.+16     	; 0x6aa <__fp_splitA+0x30>
     69a:	16 16       	cp	r1, r22
     69c:	17 06       	cpc	r1, r23
     69e:	18 06       	cpc	r1, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	f1 cf       	rjmp	.-30     	; 0x686 <__fp_splitA+0xc>
     6a4:	86 95       	lsr	r24
     6a6:	71 05       	cpc	r23, r1
     6a8:	61 05       	cpc	r22, r1
     6aa:	08 94       	sec
     6ac:	08 95       	ret

000006ae <__fp_zero>:
     6ae:	e8 94       	clt

000006b0 <__fp_szero>:
     6b0:	bb 27       	eor	r27, r27
     6b2:	66 27       	eor	r22, r22
     6b4:	77 27       	eor	r23, r23
     6b6:	cb 01       	movw	r24, r22
     6b8:	97 f9       	bld	r25, 7
     6ba:	08 95       	ret

000006bc <__gesf2>:
     6bc:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fp_cmp>
     6c0:	08 f4       	brcc	.+2      	; 0x6c4 <__gesf2+0x8>
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	08 95       	ret

000006c6 <__mulsf3>:
     6c6:	0e 94 76 03 	call	0x6ec	; 0x6ec <__mulsf3x>
     6ca:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_round>
     6ce:	0e 94 16 03 	call	0x62c	; 0x62c <__fp_pscA>
     6d2:	38 f0       	brcs	.+14     	; 0x6e2 <__mulsf3+0x1c>
     6d4:	0e 94 1d 03 	call	0x63a	; 0x63a <__fp_pscB>
     6d8:	20 f0       	brcs	.+8      	; 0x6e2 <__mulsf3+0x1c>
     6da:	95 23       	and	r25, r21
     6dc:	11 f0       	breq	.+4      	; 0x6e2 <__mulsf3+0x1c>
     6de:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_inf>
     6e2:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_nan>
     6e6:	11 24       	eor	r1, r1
     6e8:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_szero>

000006ec <__mulsf3x>:
     6ec:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_split3>
     6f0:	70 f3       	brcs	.-36     	; 0x6ce <__mulsf3+0x8>

000006f2 <__mulsf3_pse>:
     6f2:	95 9f       	mul	r25, r21
     6f4:	c1 f3       	breq	.-16     	; 0x6e6 <__mulsf3+0x20>
     6f6:	95 0f       	add	r25, r21
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	55 1f       	adc	r21, r21
     6fc:	62 9f       	mul	r22, r18
     6fe:	f0 01       	movw	r30, r0
     700:	72 9f       	mul	r23, r18
     702:	bb 27       	eor	r27, r27
     704:	f0 0d       	add	r31, r0
     706:	b1 1d       	adc	r27, r1
     708:	63 9f       	mul	r22, r19
     70a:	aa 27       	eor	r26, r26
     70c:	f0 0d       	add	r31, r0
     70e:	b1 1d       	adc	r27, r1
     710:	aa 1f       	adc	r26, r26
     712:	64 9f       	mul	r22, r20
     714:	66 27       	eor	r22, r22
     716:	b0 0d       	add	r27, r0
     718:	a1 1d       	adc	r26, r1
     71a:	66 1f       	adc	r22, r22
     71c:	82 9f       	mul	r24, r18
     71e:	22 27       	eor	r18, r18
     720:	b0 0d       	add	r27, r0
     722:	a1 1d       	adc	r26, r1
     724:	62 1f       	adc	r22, r18
     726:	73 9f       	mul	r23, r19
     728:	b0 0d       	add	r27, r0
     72a:	a1 1d       	adc	r26, r1
     72c:	62 1f       	adc	r22, r18
     72e:	83 9f       	mul	r24, r19
     730:	a0 0d       	add	r26, r0
     732:	61 1d       	adc	r22, r1
     734:	22 1f       	adc	r18, r18
     736:	74 9f       	mul	r23, r20
     738:	33 27       	eor	r19, r19
     73a:	a0 0d       	add	r26, r0
     73c:	61 1d       	adc	r22, r1
     73e:	23 1f       	adc	r18, r19
     740:	84 9f       	mul	r24, r20
     742:	60 0d       	add	r22, r0
     744:	21 1d       	adc	r18, r1
     746:	82 2f       	mov	r24, r18
     748:	76 2f       	mov	r23, r22
     74a:	6a 2f       	mov	r22, r26
     74c:	11 24       	eor	r1, r1
     74e:	9f 57       	subi	r25, 0x7F	; 127
     750:	50 40       	sbci	r21, 0x00	; 0
     752:	9a f0       	brmi	.+38     	; 0x77a <__mulsf3_pse+0x88>
     754:	f1 f0       	breq	.+60     	; 0x792 <__mulsf3_pse+0xa0>
     756:	88 23       	and	r24, r24
     758:	4a f0       	brmi	.+18     	; 0x76c <__mulsf3_pse+0x7a>
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	bb 1f       	adc	r27, r27
     760:	66 1f       	adc	r22, r22
     762:	77 1f       	adc	r23, r23
     764:	88 1f       	adc	r24, r24
     766:	91 50       	subi	r25, 0x01	; 1
     768:	50 40       	sbci	r21, 0x00	; 0
     76a:	a9 f7       	brne	.-22     	; 0x756 <__mulsf3_pse+0x64>
     76c:	9e 3f       	cpi	r25, 0xFE	; 254
     76e:	51 05       	cpc	r21, r1
     770:	80 f0       	brcs	.+32     	; 0x792 <__mulsf3_pse+0xa0>
     772:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_inf>
     776:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_szero>
     77a:	5f 3f       	cpi	r21, 0xFF	; 255
     77c:	e4 f3       	brlt	.-8      	; 0x776 <__mulsf3_pse+0x84>
     77e:	98 3e       	cpi	r25, 0xE8	; 232
     780:	d4 f3       	brlt	.-12     	; 0x776 <__mulsf3_pse+0x84>
     782:	86 95       	lsr	r24
     784:	77 95       	ror	r23
     786:	67 95       	ror	r22
     788:	b7 95       	ror	r27
     78a:	f7 95       	ror	r31
     78c:	e7 95       	ror	r30
     78e:	9f 5f       	subi	r25, 0xFF	; 255
     790:	c1 f7       	brne	.-16     	; 0x782 <__mulsf3_pse+0x90>
     792:	fe 2b       	or	r31, r30
     794:	88 0f       	add	r24, r24
     796:	91 1d       	adc	r25, r1
     798:	96 95       	lsr	r25
     79a:	87 95       	ror	r24
     79c:	97 f9       	bld	r25, 7
     79e:	08 95       	ret

000007a0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     7a0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     7a2:	91 8d       	ldd	r25, Z+25	; 0x19
     7a4:	22 8d       	ldd	r18, Z+26	; 0x1a
     7a6:	89 2f       	mov	r24, r25
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	80 5c       	subi	r24, 0xC0	; 192
     7ac:	9f 4f       	sbci	r25, 0xFF	; 255
     7ae:	82 1b       	sub	r24, r18
     7b0:	91 09       	sbc	r25, r1
}
     7b2:	8f 73       	andi	r24, 0x3F	; 63
     7b4:	99 27       	eor	r25, r25
     7b6:	08 95       	ret

000007b8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     7b8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     7ba:	91 8d       	ldd	r25, Z+25	; 0x19
     7bc:	82 8d       	ldd	r24, Z+26	; 0x1a
     7be:	98 17       	cp	r25, r24
     7c0:	31 f0       	breq	.+12     	; 0x7ce <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     7c2:	82 8d       	ldd	r24, Z+26	; 0x1a
     7c4:	e8 0f       	add	r30, r24
     7c6:	f1 1d       	adc	r31, r1
     7c8:	85 8d       	ldd	r24, Z+29	; 0x1d
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
     7d0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     7d2:	08 95       	ret

000007d4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     7d4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     7d6:	91 8d       	ldd	r25, Z+25	; 0x19
     7d8:	82 8d       	ldd	r24, Z+26	; 0x1a
     7da:	98 17       	cp	r25, r24
     7dc:	61 f0       	breq	.+24     	; 0x7f6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     7de:	82 8d       	ldd	r24, Z+26	; 0x1a
     7e0:	df 01       	movw	r26, r30
     7e2:	a8 0f       	add	r26, r24
     7e4:	b1 1d       	adc	r27, r1
     7e6:	5d 96       	adiw	r26, 0x1d	; 29
     7e8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     7ea:	92 8d       	ldd	r25, Z+26	; 0x1a
     7ec:	9f 5f       	subi	r25, 0xFF	; 255
     7ee:	9f 73       	andi	r25, 0x3F	; 63
     7f0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     7f6:	8f ef       	ldi	r24, 0xFF	; 255
     7f8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     7fa:	08 95       	ret

000007fc <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     7fc:	fc 01       	movw	r30, r24
     7fe:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     800:	44 8d       	ldd	r20, Z+28	; 0x1c
     802:	25 2f       	mov	r18, r21
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	84 2f       	mov	r24, r20
     808:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     80a:	82 1b       	sub	r24, r18
     80c:	93 0b       	sbc	r25, r19
     80e:	54 17       	cp	r21, r20
     810:	10 f0       	brcs	.+4      	; 0x816 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     812:	cf 96       	adiw	r24, 0x3f	; 63
     814:	08 95       	ret
  return tail - head - 1;
     816:	01 97       	sbiw	r24, 0x01	; 1
}
     818:	08 95       	ret

0000081a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     81a:	89 e6       	ldi	r24, 0x69	; 105
     81c:	95 e0       	ldi	r25, 0x05	; 5
     81e:	89 2b       	or	r24, r25
     820:	49 f0       	breq	.+18     	; 0x834 <_Z14serialEventRunv+0x1a>
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	89 2b       	or	r24, r25
     828:	29 f0       	breq	.+10     	; 0x834 <_Z14serialEventRunv+0x1a>
     82a:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z17Serial0_availablev>
     82e:	81 11       	cpse	r24, r1
     830:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     834:	08 95       	ret

00000836 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     836:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     838:	84 8d       	ldd	r24, Z+28	; 0x1c
     83a:	df 01       	movw	r26, r30
     83c:	a8 0f       	add	r26, r24
     83e:	b1 1d       	adc	r27, r1
     840:	a3 5a       	subi	r26, 0xA3	; 163
     842:	bf 4f       	sbci	r27, 0xFF	; 255
     844:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     846:	84 8d       	ldd	r24, Z+28	; 0x1c
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	8f 73       	andi	r24, 0x3F	; 63
     84e:	99 27       	eor	r25, r25
     850:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     852:	a6 89       	ldd	r26, Z+22	; 0x16
     854:	b7 89       	ldd	r27, Z+23	; 0x17
     856:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     858:	a0 89       	ldd	r26, Z+16	; 0x10
     85a:	b1 89       	ldd	r27, Z+17	; 0x11
     85c:	8c 91       	ld	r24, X
     85e:	83 70       	andi	r24, 0x03	; 3
     860:	80 64       	ori	r24, 0x40	; 64
     862:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     864:	93 8d       	ldd	r25, Z+27	; 0x1b
     866:	84 8d       	ldd	r24, Z+28	; 0x1c
     868:	98 13       	cpse	r25, r24
     86a:	06 c0       	rjmp	.+12     	; 0x878 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     86c:	02 88       	ldd	r0, Z+18	; 0x12
     86e:	f3 89       	ldd	r31, Z+19	; 0x13
     870:	e0 2d       	mov	r30, r0
     872:	80 81       	ld	r24, Z
     874:	8f 7d       	andi	r24, 0xDF	; 223
     876:	80 83       	st	Z, r24
     878:	08 95       	ret

0000087a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	ec 01       	movw	r28, r24
  _written = true;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     88c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     88e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     890:	98 13       	cpse	r25, r24
     892:	05 c0       	rjmp	.+10     	; 0x89e <_ZN14HardwareSerial5writeEh+0x24>
     894:	e8 89       	ldd	r30, Y+16	; 0x10
     896:	f9 89       	ldd	r31, Y+17	; 0x11
     898:	80 81       	ld	r24, Z
     89a:	85 fd       	sbrc	r24, 5
     89c:	26 c0       	rjmp	.+76     	; 0x8ea <_ZN14HardwareSerial5writeEh+0x70>
     89e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     8a0:	0b 8d       	ldd	r16, Y+27	; 0x1b
     8a2:	10 e0       	ldi	r17, 0x00	; 0
     8a4:	0f 5f       	subi	r16, 0xFF	; 255
     8a6:	1f 4f       	sbci	r17, 0xFF	; 255
     8a8:	0f 73       	andi	r16, 0x3F	; 63
     8aa:	11 27       	eor	r17, r17
     8ac:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     8ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8b0:	e8 12       	cpse	r14, r24
     8b2:	0c c0       	rjmp	.+24     	; 0x8cc <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	07 fc       	sbrc	r0, 7
     8b8:	fa cf       	rjmp	.-12     	; 0x8ae <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     8ba:	e8 89       	ldd	r30, Y+16	; 0x10
     8bc:	f9 89       	ldd	r31, Y+17	; 0x11
     8be:	80 81       	ld	r24, Z
     8c0:	85 ff       	sbrs	r24, 5
     8c2:	f5 cf       	rjmp	.-22     	; 0x8ae <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     8c4:	ce 01       	movw	r24, r28
     8c6:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     8ca:	f1 cf       	rjmp	.-30     	; 0x8ae <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     8cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8ce:	fe 01       	movw	r30, r28
     8d0:	e8 0f       	add	r30, r24
     8d2:	f1 1d       	adc	r31, r1
     8d4:	e3 5a       	subi	r30, 0xA3	; 163
     8d6:	ff 4f       	sbci	r31, 0xFF	; 255
     8d8:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     8da:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8dc:	f8 94       	cli
    _tx_buffer_head = i;
     8de:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     8e0:	ea 89       	ldd	r30, Y+18	; 0x12
     8e2:	fb 89       	ldd	r31, Y+19	; 0x13
     8e4:	80 81       	ld	r24, Z
     8e6:	80 62       	ori	r24, 0x20	; 32
     8e8:	0a c0       	rjmp	.+20     	; 0x8fe <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     8ea:	9f b7       	in	r25, 0x3f	; 63
     8ec:	f8 94       	cli
      *_udr = c;
     8ee:	ee 89       	ldd	r30, Y+22	; 0x16
     8f0:	ff 89       	ldd	r31, Y+23	; 0x17
     8f2:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     8f4:	e8 89       	ldd	r30, Y+16	; 0x10
     8f6:	f9 89       	ldd	r31, Y+17	; 0x11
     8f8:	80 81       	ld	r24, Z
     8fa:	83 70       	andi	r24, 0x03	; 3
     8fc:	80 64       	ori	r24, 0x40	; 64
     8fe:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     900:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	08 95       	ret

00000914 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     91a:	88 8d       	ldd	r24, Y+24	; 0x18
     91c:	88 23       	and	r24, r24
     91e:	c9 f0       	breq	.+50     	; 0x952 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     920:	ea 89       	ldd	r30, Y+18	; 0x12
     922:	fb 89       	ldd	r31, Y+19	; 0x13
     924:	80 81       	ld	r24, Z
     926:	85 fd       	sbrc	r24, 5
     928:	05 c0       	rjmp	.+10     	; 0x934 <_ZN14HardwareSerial5flushEv+0x20>
     92a:	a8 89       	ldd	r26, Y+16	; 0x10
     92c:	b9 89       	ldd	r27, Y+17	; 0x11
     92e:	8c 91       	ld	r24, X
     930:	86 fd       	sbrc	r24, 6
     932:	0f c0       	rjmp	.+30     	; 0x952 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	07 fc       	sbrc	r0, 7
     938:	f5 cf       	rjmp	.-22     	; 0x924 <_ZN14HardwareSerial5flushEv+0x10>
     93a:	80 81       	ld	r24, Z
     93c:	85 ff       	sbrs	r24, 5
     93e:	f2 cf       	rjmp	.-28     	; 0x924 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     940:	a8 89       	ldd	r26, Y+16	; 0x10
     942:	b9 89       	ldd	r27, Y+17	; 0x11
     944:	8c 91       	ld	r24, X
     946:	85 ff       	sbrs	r24, 5
     948:	ed cf       	rjmp	.-38     	; 0x924 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     94a:	ce 01       	movw	r24, r28
     94c:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     950:	e7 cf       	rjmp	.-50     	; 0x920 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     958:	cf 92       	push	r12
     95a:	df 92       	push	r13
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	ec 01       	movw	r28, r24
     968:	6a 01       	movw	r12, r20
     96a:	7b 01       	movw	r14, r22
     96c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     96e:	e8 89       	ldd	r30, Y+16	; 0x10
     970:	f9 89       	ldd	r31, Y+17	; 0x11
     972:	82 e0       	ldi	r24, 0x02	; 2
     974:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     976:	41 15       	cp	r20, r1
     978:	51 4e       	sbci	r21, 0xE1	; 225
     97a:	61 05       	cpc	r22, r1
     97c:	71 05       	cpc	r23, r1
     97e:	b1 f0       	breq	.+44     	; 0x9ac <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	79 e0       	ldi	r23, 0x09	; 9
     984:	8d e3       	ldi	r24, 0x3D	; 61
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a7 01       	movw	r20, r14
     98a:	96 01       	movw	r18, r12
     98c:	0e 94 a5 09 	call	0x134a	; 0x134a <__udivmodsi4>
     990:	da 01       	movw	r26, r20
     992:	c9 01       	movw	r24, r18
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	a1 09       	sbc	r26, r1
     998:	b1 09       	sbc	r27, r1
     99a:	b6 95       	lsr	r27
     99c:	a7 95       	ror	r26
     99e:	97 95       	ror	r25
     9a0:	87 95       	ror	r24
     9a2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     9a4:	21 15       	cp	r18, r1
     9a6:	80 e1       	ldi	r24, 0x10	; 16
     9a8:	38 07       	cpc	r19, r24
     9aa:	a8 f0       	brcs	.+42     	; 0x9d6 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     9ac:	e8 89       	ldd	r30, Y+16	; 0x10
     9ae:	f9 89       	ldd	r31, Y+17	; 0x11
     9b0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     9b2:	60 e8       	ldi	r22, 0x80	; 128
     9b4:	74 e8       	ldi	r23, 0x84	; 132
     9b6:	8e e1       	ldi	r24, 0x1E	; 30
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a7 01       	movw	r20, r14
     9bc:	96 01       	movw	r18, r12
     9be:	0e 94 a5 09 	call	0x134a	; 0x134a <__udivmodsi4>
     9c2:	da 01       	movw	r26, r20
     9c4:	c9 01       	movw	r24, r18
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	a1 09       	sbc	r26, r1
     9ca:	b1 09       	sbc	r27, r1
     9cc:	b6 95       	lsr	r27
     9ce:	a7 95       	ror	r26
     9d0:	97 95       	ror	r25
     9d2:	87 95       	ror	r24
     9d4:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     9d6:	ec 85       	ldd	r30, Y+12	; 0x0c
     9d8:	fd 85       	ldd	r31, Y+13	; 0x0d
     9da:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     9dc:	ee 85       	ldd	r30, Y+14	; 0x0e
     9de:	ff 85       	ldd	r31, Y+15	; 0x0f
     9e0:	20 83       	st	Z, r18

  _written = false;
     9e2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     9e4:	ec 89       	ldd	r30, Y+20	; 0x14
     9e6:	fd 89       	ldd	r31, Y+21	; 0x15
     9e8:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     9ea:	ea 89       	ldd	r30, Y+18	; 0x12
     9ec:	fb 89       	ldd	r31, Y+19	; 0x13
     9ee:	80 81       	ld	r24, Z
     9f0:	80 61       	ori	r24, 0x10	; 16
     9f2:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     9f4:	ea 89       	ldd	r30, Y+18	; 0x12
     9f6:	fb 89       	ldd	r31, Y+19	; 0x13
     9f8:	80 81       	ld	r24, Z
     9fa:	88 60       	ori	r24, 0x08	; 8
     9fc:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     9fe:	ea 89       	ldd	r30, Y+18	; 0x12
     a00:	fb 89       	ldd	r31, Y+19	; 0x13
     a02:	80 81       	ld	r24, Z
     a04:	80 68       	ori	r24, 0x80	; 128
     a06:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     a08:	ea 89       	ldd	r30, Y+18	; 0x12
     a0a:	fb 89       	ldd	r31, Y+19	; 0x13
     a0c:	80 81       	ld	r24, Z
     a0e:	8f 7d       	andi	r24, 0xDF	; 223
     a10:	80 83       	st	Z, r24
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	08 95       	ret

00000a22 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     a22:	1f 92       	push	r1
     a24:	0f 92       	push	r0
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	0f 92       	push	r0
     a2a:	11 24       	eor	r1, r1
     a2c:	2f 93       	push	r18
     a2e:	8f 93       	push	r24
     a30:	9f 93       	push	r25
     a32:	ef 93       	push	r30
     a34:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     a36:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Serial+0x10>
     a3a:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Serial+0x11>
     a3e:	80 81       	ld	r24, Z
     a40:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Serial+0x16>
     a44:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Serial+0x17>
     a48:	82 fd       	sbrc	r24, 2
     a4a:	12 c0       	rjmp	.+36     	; 0xa70 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     a4c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     a4e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Serial+0x19>
     a52:	8f 5f       	subi	r24, 0xFF	; 255
     a54:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     a56:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <Serial+0x1a>
     a5a:	82 17       	cp	r24, r18
     a5c:	51 f0       	breq	.+20     	; 0xa72 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     a5e:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <Serial+0x19>
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	e2 5c       	subi	r30, 0xC2	; 194
     a66:	fe 4f       	sbci	r31, 0xFE	; 254
     a68:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     a6a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <Serial+0x19>
     a6e:	01 c0       	rjmp	.+2      	; 0xa72 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     a70:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     a72:	ff 91       	pop	r31
     a74:	ef 91       	pop	r30
     a76:	9f 91       	pop	r25
     a78:	8f 91       	pop	r24
     a7a:	2f 91       	pop	r18
     a7c:	0f 90       	pop	r0
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	0f 90       	pop	r0
     a82:	1f 90       	pop	r1
     a84:	18 95       	reti

00000a86 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     a86:	1f 92       	push	r1
     a88:	0f 92       	push	r0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	0f 92       	push	r0
     a8e:	11 24       	eor	r1, r1
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     aa8:	8e e3       	ldi	r24, 0x3E	; 62
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     ab0:	ff 91       	pop	r31
     ab2:	ef 91       	pop	r30
     ab4:	bf 91       	pop	r27
     ab6:	af 91       	pop	r26
     ab8:	9f 91       	pop	r25
     aba:	8f 91       	pop	r24
     abc:	7f 91       	pop	r23
     abe:	6f 91       	pop	r22
     ac0:	5f 91       	pop	r21
     ac2:	4f 91       	pop	r20
     ac4:	3f 91       	pop	r19
     ac6:	2f 91       	pop	r18
     ac8:	0f 90       	pop	r0
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	0f 90       	pop	r0
     ace:	1f 90       	pop	r1
     ad0:	18 95       	reti

00000ad2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     ad2:	8e e3       	ldi	r24, 0x3E	; 62
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_ZN14HardwareSerial9availableEv>
     ada:	21 e0       	ldi	r18, 0x01	; 1
     adc:	89 2b       	or	r24, r25
     ade:	09 f4       	brne	.+2      	; 0xae2 <_Z17Serial0_availablev+0x10>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
}
     ae2:	82 2f       	mov	r24, r18
     ae4:	08 95       	ret

00000ae6 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     ae6:	ee e3       	ldi	r30, 0x3E	; 62
     ae8:	f1 e0       	ldi	r31, 0x01	; 1
     aea:	13 82       	std	Z+3, r1	; 0x03
     aec:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     aee:	88 ee       	ldi	r24, 0xE8	; 232
     af0:	93 e0       	ldi	r25, 0x03	; 3
     af2:	a0 e0       	ldi	r26, 0x00	; 0
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	84 83       	std	Z+4, r24	; 0x04
     af8:	95 83       	std	Z+5, r25	; 0x05
     afa:	a6 83       	std	Z+6, r26	; 0x06
     afc:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     afe:	81 e1       	ldi	r24, 0x11	; 17
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	91 83       	std	Z+1, r25	; 0x01
     b04:	80 83       	st	Z, r24
     b06:	85 ec       	ldi	r24, 0xC5	; 197
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	95 87       	std	Z+13, r25	; 0x0d
     b0c:	84 87       	std	Z+12, r24	; 0x0c
     b0e:	84 ec       	ldi	r24, 0xC4	; 196
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	97 87       	std	Z+15, r25	; 0x0f
     b14:	86 87       	std	Z+14, r24	; 0x0e
     b16:	80 ec       	ldi	r24, 0xC0	; 192
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	91 8b       	std	Z+17, r25	; 0x11
     b1c:	80 8b       	std	Z+16, r24	; 0x10
     b1e:	81 ec       	ldi	r24, 0xC1	; 193
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	93 8b       	std	Z+19, r25	; 0x13
     b24:	82 8b       	std	Z+18, r24	; 0x12
     b26:	82 ec       	ldi	r24, 0xC2	; 194
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	95 8b       	std	Z+21, r25	; 0x15
     b2c:	84 8b       	std	Z+20, r24	; 0x14
     b2e:	86 ec       	ldi	r24, 0xC6	; 198
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	97 8b       	std	Z+23, r25	; 0x17
     b34:	86 8b       	std	Z+22, r24	; 0x16
     b36:	11 8e       	std	Z+25, r1	; 0x19
     b38:	12 8e       	std	Z+26, r1	; 0x1a
     b3a:	13 8e       	std	Z+27, r1	; 0x1b
     b3c:	14 8e       	std	Z+28, r1	; 0x1c
     b3e:	08 95       	ret

00000b40 <initVariant>:
     b40:	08 95       	ret

00000b42 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     b42:	0e 94 fd 07 	call	0xffa	; 0xffa <init>

	initVariant();
     b46:	0e 94 a0 05 	call	0xb40	; 0xb40 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     b4a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     b4e:	cd e0       	ldi	r28, 0x0D	; 13
     b50:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     b52:	0e 94 55 01 	call	0x2aa	; 0x2aa <loop>
		if (serialEventRun) serialEventRun();
     b56:	20 97       	sbiw	r28, 0x00	; 0
     b58:	e1 f3       	breq	.-8      	; 0xb52 <main+0x10>
     b5a:	0e 94 0d 04 	call	0x81a	; 0x81a <_Z14serialEventRunv>
     b5e:	f9 cf       	rjmp	.-14     	; 0xb52 <main+0x10>

00000b60 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     b60:	cf 92       	push	r12
     b62:	df 92       	push	r13
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	6c 01       	movw	r12, r24
     b72:	7a 01       	movw	r14, r20
     b74:	8b 01       	movw	r16, r22
     b76:	c0 e0       	ldi	r28, 0x00	; 0
     b78:	d0 e0       	ldi	r29, 0x00	; 0
     b7a:	ce 15       	cp	r28, r14
     b7c:	df 05       	cpc	r29, r15
     b7e:	81 f0       	breq	.+32     	; 0xba0 <_ZN5Print5writeEPKhj+0x40>
     b80:	d8 01       	movw	r26, r16
     b82:	6d 91       	ld	r22, X+
     b84:	8d 01       	movw	r16, r26
     b86:	d6 01       	movw	r26, r12
     b88:	ed 91       	ld	r30, X+
     b8a:	fc 91       	ld	r31, X
     b8c:	01 90       	ld	r0, Z+
     b8e:	f0 81       	ld	r31, Z
     b90:	e0 2d       	mov	r30, r0
     b92:	c6 01       	movw	r24, r12
     b94:	09 95       	icall
     b96:	89 2b       	or	r24, r25
     b98:	11 f0       	breq	.+4      	; 0xb9e <_ZN5Print5writeEPKhj+0x3e>
     b9a:	21 96       	adiw	r28, 0x01	; 1
     b9c:	ee cf       	rjmp	.-36     	; 0xb7a <_ZN5Print5writeEPKhj+0x1a>
     b9e:	7e 01       	movw	r14, r28
     ba0:	c7 01       	movw	r24, r14
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	08 95       	ret

00000bb4 <_ZN5Print5writeEPKc>:
     bb4:	61 15       	cp	r22, r1
     bb6:	71 05       	cpc	r23, r1
     bb8:	79 f0       	breq	.+30     	; 0xbd8 <_ZN5Print5writeEPKc+0x24>
     bba:	fb 01       	movw	r30, r22
     bbc:	01 90       	ld	r0, Z+
     bbe:	00 20       	and	r0, r0
     bc0:	e9 f7       	brne	.-6      	; 0xbbc <_ZN5Print5writeEPKc+0x8>
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	af 01       	movw	r20, r30
     bc6:	46 1b       	sub	r20, r22
     bc8:	57 0b       	sbc	r21, r23
     bca:	dc 01       	movw	r26, r24
     bcc:	ed 91       	ld	r30, X+
     bce:	fc 91       	ld	r31, X
     bd0:	02 80       	ldd	r0, Z+2	; 0x02
     bd2:	f3 81       	ldd	r31, Z+3	; 0x03
     bd4:	e0 2d       	mov	r30, r0
     bd6:	09 94       	ijmp
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	08 95       	ret

00000bde <_ZN5Print5printEPKc>:
     bde:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <_ZN5Print5writeEPKc>

00000be2 <_ZN5Print5printEc>:
     be2:	dc 01       	movw	r26, r24
     be4:	ed 91       	ld	r30, X+
     be6:	fc 91       	ld	r31, X
     be8:	01 90       	ld	r0, Z+
     bea:	f0 81       	ld	r31, Z
     bec:	e0 2d       	mov	r30, r0
     bee:	09 94       	ijmp

00000bf0 <_ZN5Print7printlnEv>:
     bf0:	6f e1       	ldi	r22, 0x1F	; 31
     bf2:	71 e0       	ldi	r23, 0x01	; 1
     bf4:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <_ZN5Print5writeEPKc>

00000bf8 <_ZN5Print11printNumberEmh>:
     bf8:	8f 92       	push	r8
     bfa:	9f 92       	push	r9
     bfc:	af 92       	push	r10
     bfe:	bf 92       	push	r11
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	a1 97       	sbiw	r28, 0x21	; 33
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	7c 01       	movw	r14, r24
     c1e:	fa 01       	movw	r30, r20
     c20:	cb 01       	movw	r24, r22
     c22:	19 a2       	std	Y+33, r1	; 0x21
     c24:	22 30       	cpi	r18, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <_ZN5Print11printNumberEmh+0x32>
     c28:	2a e0       	ldi	r18, 0x0A	; 10
     c2a:	8e 01       	movw	r16, r28
     c2c:	0f 5d       	subi	r16, 0xDF	; 223
     c2e:	1f 4f       	sbci	r17, 0xFF	; 255
     c30:	82 2e       	mov	r8, r18
     c32:	91 2c       	mov	r9, r1
     c34:	a1 2c       	mov	r10, r1
     c36:	b1 2c       	mov	r11, r1
     c38:	bf 01       	movw	r22, r30
     c3a:	a5 01       	movw	r20, r10
     c3c:	94 01       	movw	r18, r8
     c3e:	0e 94 a5 09 	call	0x134a	; 0x134a <__udivmodsi4>
     c42:	f9 01       	movw	r30, r18
     c44:	ca 01       	movw	r24, r20
     c46:	01 50       	subi	r16, 0x01	; 1
     c48:	11 09       	sbc	r17, r1
     c4a:	6a 30       	cpi	r22, 0x0A	; 10
     c4c:	10 f4       	brcc	.+4      	; 0xc52 <_ZN5Print11printNumberEmh+0x5a>
     c4e:	60 5d       	subi	r22, 0xD0	; 208
     c50:	01 c0       	rjmp	.+2      	; 0xc54 <_ZN5Print11printNumberEmh+0x5c>
     c52:	69 5c       	subi	r22, 0xC9	; 201
     c54:	d8 01       	movw	r26, r16
     c56:	6c 93       	st	X, r22
     c58:	23 2b       	or	r18, r19
     c5a:	24 2b       	or	r18, r20
     c5c:	25 2b       	or	r18, r21
     c5e:	61 f7       	brne	.-40     	; 0xc38 <_ZN5Print11printNumberEmh+0x40>
     c60:	b8 01       	movw	r22, r16
     c62:	c7 01       	movw	r24, r14
     c64:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN5Print5writeEPKc>
     c68:	a1 96       	adiw	r28, 0x21	; 33
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	bf 90       	pop	r11
     c82:	af 90       	pop	r10
     c84:	9f 90       	pop	r9
     c86:	8f 90       	pop	r8
     c88:	08 95       	ret

00000c8a <_ZN5Print5printEmi>:
     c8a:	21 15       	cp	r18, r1
     c8c:	31 05       	cpc	r19, r1
     c8e:	41 f4       	brne	.+16     	; 0xca0 <_ZN5Print5printEmi+0x16>
     c90:	dc 01       	movw	r26, r24
     c92:	ed 91       	ld	r30, X+
     c94:	fc 91       	ld	r31, X
     c96:	01 90       	ld	r0, Z+
     c98:	f0 81       	ld	r31, Z
     c9a:	e0 2d       	mov	r30, r0
     c9c:	64 2f       	mov	r22, r20
     c9e:	09 94       	ijmp
     ca0:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <_ZN5Print11printNumberEmh>

00000ca4 <_ZN5Print5printEji>:
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <_ZN5Print5printEmi>

00000cb0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     cb0:	7f 92       	push	r7
     cb2:	8f 92       	push	r8
     cb4:	9f 92       	push	r9
     cb6:	af 92       	push	r10
     cb8:	bf 92       	push	r11
     cba:	cf 92       	push	r12
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	8c 01       	movw	r16, r24
     ccc:	6a 01       	movw	r12, r20
     cce:	7b 01       	movw	r14, r22
     cd0:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     cd2:	9a 01       	movw	r18, r20
     cd4:	ab 01       	movw	r20, r22
     cd6:	c7 01       	movw	r24, r14
     cd8:	b6 01       	movw	r22, r12
     cda:	0e 94 a0 09 	call	0x1340	; 0x1340 <__unordsf2>
     cde:	88 23       	and	r24, r24
     ce0:	19 f0       	breq	.+6      	; 0xce8 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     ce2:	62 e2       	ldi	r22, 0x22	; 34
     ce4:	71 e0       	ldi	r23, 0x01	; 1
     ce6:	27 c0       	rjmp	.+78     	; 0xd36 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     ce8:	46 01       	movw	r8, r12
     cea:	57 01       	movw	r10, r14
     cec:	e8 94       	clt
     cee:	b7 f8       	bld	r11, 7
     cf0:	2f ef       	ldi	r18, 0xFF	; 255
     cf2:	3f ef       	ldi	r19, 0xFF	; 255
     cf4:	4f e7       	ldi	r20, 0x7F	; 127
     cf6:	5f e7       	ldi	r21, 0x7F	; 127
     cf8:	c5 01       	movw	r24, r10
     cfa:	b4 01       	movw	r22, r8
     cfc:	0e 94 a0 09 	call	0x1340	; 0x1340 <__unordsf2>
     d00:	81 11       	cpse	r24, r1
     d02:	0d c0       	rjmp	.+26     	; 0xd1e <_ZN5Print10printFloatEdh+0x6e>
     d04:	2f ef       	ldi	r18, 0xFF	; 255
     d06:	3f ef       	ldi	r19, 0xFF	; 255
     d08:	4f e7       	ldi	r20, 0x7F	; 127
     d0a:	5f e7       	ldi	r21, 0x7F	; 127
     d0c:	c5 01       	movw	r24, r10
     d0e:	b4 01       	movw	r22, r8
     d10:	0e 94 a7 02 	call	0x54e	; 0x54e <__cmpsf2>
     d14:	18 16       	cp	r1, r24
     d16:	1c f4       	brge	.+6      	; 0xd1e <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     d18:	66 e2       	ldi	r22, 0x26	; 38
     d1a:	71 e0       	ldi	r23, 0x01	; 1
     d1c:	0c c0       	rjmp	.+24     	; 0xd36 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     d1e:	2f ef       	ldi	r18, 0xFF	; 255
     d20:	3f ef       	ldi	r19, 0xFF	; 255
     d22:	4f e7       	ldi	r20, 0x7F	; 127
     d24:	5f e4       	ldi	r21, 0x4F	; 79
     d26:	c7 01       	movw	r24, r14
     d28:	b6 01       	movw	r22, r12
     d2a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__gesf2>
     d2e:	18 16       	cp	r1, r24
     d30:	94 f4       	brge	.+36     	; 0xd56 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     d32:	6a e2       	ldi	r22, 0x2A	; 42
     d34:	71 e0       	ldi	r23, 0x01	; 1
     d36:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	cf 90       	pop	r12
     d48:	bf 90       	pop	r11
     d4a:	af 90       	pop	r10
     d4c:	9f 90       	pop	r9
     d4e:	8f 90       	pop	r8
     d50:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     d52:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     d56:	2f ef       	ldi	r18, 0xFF	; 255
     d58:	3f ef       	ldi	r19, 0xFF	; 255
     d5a:	4f e7       	ldi	r20, 0x7F	; 127
     d5c:	5f ec       	ldi	r21, 0xCF	; 207
     d5e:	c7 01       	movw	r24, r14
     d60:	b6 01       	movw	r22, r12
     d62:	0e 94 a7 02 	call	0x54e	; 0x54e <__cmpsf2>
     d66:	87 fd       	sbrc	r24, 7
     d68:	e4 cf       	rjmp	.-56     	; 0xd32 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	a9 01       	movw	r20, r18
     d70:	c7 01       	movw	r24, r14
     d72:	b6 01       	movw	r22, r12
     d74:	0e 94 a7 02 	call	0x54e	; 0x54e <__cmpsf2>
     d78:	87 ff       	sbrs	r24, 7
     d7a:	0a c0       	rjmp	.+20     	; 0xd90 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
     d7c:	6d e2       	ldi	r22, 0x2D	; 45
     d7e:	c8 01       	movw	r24, r16
     d80:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_ZN5Print5printEc>
     d84:	ec 01       	movw	r28, r24
     number = -number;
     d86:	f7 fa       	bst	r15, 7
     d88:	f0 94       	com	r15
     d8a:	f7 f8       	bld	r15, 7
     d8c:	f0 94       	com	r15
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     d90:	c0 e0       	ldi	r28, 0x00	; 0
     d92:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     d94:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     d9e:	7b 14       	cp	r7, r11
     da0:	41 f0       	breq	.+16     	; 0xdb2 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e2       	ldi	r20, 0x20	; 32
     da8:	51 e4       	ldi	r21, 0x41	; 65
     daa:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     dae:	b3 94       	inc	r11
     db0:	f6 cf       	rjmp	.-20     	; 0xd9e <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
     db2:	a7 01       	movw	r20, r14
     db4:	96 01       	movw	r18, r12
     db6:	0e 94 3b 02 	call	0x476	; 0x476 <__addsf3>
     dba:	6b 01       	movw	r12, r22
     dbc:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     dbe:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fixunssfsi>
     dc2:	4b 01       	movw	r8, r22
     dc4:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     dc6:	2a e0       	ldi	r18, 0x0A	; 10
     dc8:	ab 01       	movw	r20, r22
     dca:	bc 01       	movw	r22, r24
     dcc:	c8 01       	movw	r24, r16
     dce:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     dd2:	c8 0f       	add	r28, r24
     dd4:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     dd6:	77 20       	and	r7, r7
     dd8:	b9 f1       	breq	.+110    	; 0xe48 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     dda:	c5 01       	movw	r24, r10
     ddc:	b4 01       	movw	r22, r8
     dde:	0e 94 ac 02 	call	0x558	; 0x558 <__floatunsisf>
     de2:	9b 01       	movw	r18, r22
     de4:	ac 01       	movw	r20, r24
     de6:	c7 01       	movw	r24, r14
     de8:	b6 01       	movw	r22, r12
     dea:	0e 94 3a 02 	call	0x474	; 0x474 <__subsf3>
     dee:	6b 01       	movw	r12, r22
     df0:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
     df2:	6e e2       	ldi	r22, 0x2E	; 46
     df4:	c8 01       	movw	r24, r16
     df6:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_ZN5Print5printEc>
     dfa:	c8 0f       	add	r28, r24
     dfc:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e2       	ldi	r20, 0x20	; 32
     e04:	51 e4       	ldi	r21, 0x41	; 65
     e06:	c7 01       	movw	r24, r14
     e08:	b6 01       	movw	r22, r12
     e0a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__mulsf3>
     e0e:	4b 01       	movw	r8, r22
     e10:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
     e12:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fixunssfsi>
     e16:	6b 01       	movw	r12, r22
     e18:	7c 01       	movw	r14, r24
    n += print(toPrint);
     e1a:	4a e0       	ldi	r20, 0x0A	; 10
     e1c:	50 e0       	ldi	r21, 0x00	; 0
     e1e:	c8 01       	movw	r24, r16
     e20:	0e 94 52 06 	call	0xca4	; 0xca4 <_ZN5Print5printEji>
     e24:	c8 0f       	add	r28, r24
     e26:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
     e28:	b6 01       	movw	r22, r12
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 ac 02 	call	0x558	; 0x558 <__floatunsisf>
     e32:	9b 01       	movw	r18, r22
     e34:	ac 01       	movw	r20, r24
     e36:	c5 01       	movw	r24, r10
     e38:	b4 01       	movw	r22, r8
     e3a:	0e 94 3a 02 	call	0x474	; 0x474 <__subsf3>
     e3e:	6b 01       	movw	r12, r22
     e40:	7c 01       	movw	r14, r24
     e42:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     e44:	71 10       	cpse	r7, r1
     e46:	db cf       	rjmp	.-74     	; 0xdfe <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     e48:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	df 90       	pop	r13
     e58:	cf 90       	pop	r12
     e5a:	bf 90       	pop	r11
     e5c:	af 90       	pop	r10
     e5e:	9f 90       	pop	r9
     e60:	8f 90       	pop	r8
     e62:	7f 90       	pop	r7
     e64:	08 95       	ret

00000e66 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     e66:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <_ZN5Print10printFloatEdh>

00000e6a <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     e74:	0e 94 58 06 	call	0xcb0	; 0xcb0 <_ZN5Print10printFloatEdh>
     e78:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
     e7a:	ce 01       	movw	r24, r28
     e7c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <_ZN5Print7printlnEv>
  return n;
}
     e80:	80 0f       	add	r24, r16
     e82:	91 1f       	adc	r25, r17
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	08 95       	ret

00000e8e <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
     ea4:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <timer0_millis>
     ea8:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <timer0_millis+0x1>
     eac:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <timer0_millis+0x2>
     eb0:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <timer0_millis+0x3>
     eb4:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <timer0_fract>
     eb8:	23 e0       	ldi	r18, 0x03	; 3
     eba:	23 0f       	add	r18, r19
     ebc:	2d 37       	cpi	r18, 0x7D	; 125
     ebe:	20 f4       	brcc	.+8      	; 0xec8 <__vector_16+0x3a>
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	a1 1d       	adc	r26, r1
     ec4:	b1 1d       	adc	r27, r1
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <__vector_16+0x44>
     ec8:	26 e8       	ldi	r18, 0x86	; 134
     eca:	23 0f       	add	r18, r19
     ecc:	02 96       	adiw	r24, 0x02	; 2
     ece:	a1 1d       	adc	r26, r1
     ed0:	b1 1d       	adc	r27, r1
     ed2:	20 93 db 01 	sts	0x01DB, r18	; 0x8001db <timer0_fract>
     ed6:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <timer0_millis>
     eda:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <timer0_millis+0x1>
     ede:	a0 93 de 01 	sts	0x01DE, r26	; 0x8001de <timer0_millis+0x2>
     ee2:	b0 93 df 01 	sts	0x01DF, r27	; 0x8001df <timer0_millis+0x3>
     ee6:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <timer0_overflow_count>
     eea:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <timer0_overflow_count+0x1>
     eee:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <timer0_overflow_count+0x2>
     ef2:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <timer0_overflow_count+0x3>
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	a1 1d       	adc	r26, r1
     efa:	b1 1d       	adc	r27, r1
     efc:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <timer0_overflow_count>
     f00:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <timer0_overflow_count+0x1>
     f04:	a0 93 e2 01 	sts	0x01E2, r26	; 0x8001e2 <timer0_overflow_count+0x2>
     f08:	b0 93 e3 01 	sts	0x01E3, r27	; 0x8001e3 <timer0_overflow_count+0x3>
     f0c:	bf 91       	pop	r27
     f0e:	af 91       	pop	r26
     f10:	9f 91       	pop	r25
     f12:	8f 91       	pop	r24
     f14:	3f 91       	pop	r19
     f16:	2f 91       	pop	r18
     f18:	0f 90       	pop	r0
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	0f 90       	pop	r0
     f1e:	1f 90       	pop	r1
     f20:	18 95       	reti

00000f22 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     f22:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     f24:	f8 94       	cli
	m = timer0_overflow_count;
     f26:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <timer0_overflow_count>
     f2a:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <timer0_overflow_count+0x1>
     f2e:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <timer0_overflow_count+0x2>
     f32:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     f36:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     f38:	a8 9b       	sbis	0x15, 0	; 21
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <micros+0x24>
     f3c:	2f 3f       	cpi	r18, 0xFF	; 255
     f3e:	19 f0       	breq	.+6      	; 0xf46 <micros+0x24>
		m++;
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	a1 1d       	adc	r26, r1
     f44:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     f46:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     f48:	ba 2f       	mov	r27, r26
     f4a:	a9 2f       	mov	r26, r25
     f4c:	98 2f       	mov	r25, r24
     f4e:	88 27       	eor	r24, r24
     f50:	82 0f       	add	r24, r18
     f52:	91 1d       	adc	r25, r1
     f54:	a1 1d       	adc	r26, r1
     f56:	b1 1d       	adc	r27, r1
     f58:	bc 01       	movw	r22, r24
     f5a:	cd 01       	movw	r24, r26
     f5c:	42 e0       	ldi	r20, 0x02	; 2
     f5e:	66 0f       	add	r22, r22
     f60:	77 1f       	adc	r23, r23
     f62:	88 1f       	adc	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	4a 95       	dec	r20
     f68:	d1 f7       	brne	.-12     	; 0xf5e <micros+0x3c>
}
     f6a:	08 95       	ret

00000f6c <delay>:

void delay(unsigned long ms)
{
     f6c:	8f 92       	push	r8
     f6e:	9f 92       	push	r9
     f70:	af 92       	push	r10
     f72:	bf 92       	push	r11
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	6b 01       	movw	r12, r22
     f7e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     f80:	0e 94 91 07 	call	0xf22	; 0xf22 <micros>
     f84:	4b 01       	movw	r8, r22
     f86:	5c 01       	movw	r10, r24

	while (ms > 0) {
     f88:	c1 14       	cp	r12, r1
     f8a:	d1 04       	cpc	r13, r1
     f8c:	e1 04       	cpc	r14, r1
     f8e:	f1 04       	cpc	r15, r1
     f90:	01 f1       	breq	.+64     	; 0xfd2 <delay+0x66>
		yield();
     f92:	0e 94 fe 08 	call	0x11fc	; 0x11fc <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     f96:	0e 94 91 07 	call	0xf22	; 0xf22 <micros>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	88 19       	sub	r24, r8
     fa0:	99 09       	sbc	r25, r9
     fa2:	aa 09       	sbc	r26, r10
     fa4:	bb 09       	sbc	r27, r11
     fa6:	88 3e       	cpi	r24, 0xE8	; 232
     fa8:	93 40       	sbci	r25, 0x03	; 3
     faa:	a1 05       	cpc	r26, r1
     fac:	b1 05       	cpc	r27, r1
     fae:	60 f3       	brcs	.-40     	; 0xf88 <delay+0x1c>
			ms--;
     fb0:	21 e0       	ldi	r18, 0x01	; 1
     fb2:	c2 1a       	sub	r12, r18
     fb4:	d1 08       	sbc	r13, r1
     fb6:	e1 08       	sbc	r14, r1
     fb8:	f1 08       	sbc	r15, r1
			start += 1000;
     fba:	88 ee       	ldi	r24, 0xE8	; 232
     fbc:	88 0e       	add	r8, r24
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	98 1e       	adc	r9, r24
     fc2:	a1 1c       	adc	r10, r1
     fc4:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     fc6:	c1 14       	cp	r12, r1
     fc8:	d1 04       	cpc	r13, r1
     fca:	e1 04       	cpc	r14, r1
     fcc:	f1 04       	cpc	r15, r1
     fce:	19 f7       	brne	.-58     	; 0xf96 <delay+0x2a>
     fd0:	db cf       	rjmp	.-74     	; 0xf88 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	df 90       	pop	r13
     fd8:	cf 90       	pop	r12
     fda:	bf 90       	pop	r11
     fdc:	af 90       	pop	r10
     fde:	9f 90       	pop	r9
     fe0:	8f 90       	pop	r8
     fe2:	08 95       	ret

00000fe4 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	91 05       	cpc	r25, r1
     fe8:	38 f0       	brcs	.+14     	; 0xff8 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     ff2:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <delayMicroseconds+0x10>
     ff8:	08 95       	ret

00000ffa <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     ffa:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     ffc:	84 b5       	in	r24, 0x24	; 36
     ffe:	82 60       	ori	r24, 0x02	; 2
    1000:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1002:	84 b5       	in	r24, 0x24	; 36
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1008:	85 b5       	in	r24, 0x25	; 37
    100a:	82 60       	ori	r24, 0x02	; 2
    100c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    100e:	85 b5       	in	r24, 0x25	; 37
    1010:	81 60       	ori	r24, 0x01	; 1
    1012:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1014:	ee e6       	ldi	r30, 0x6E	; 110
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	81 60       	ori	r24, 0x01	; 1
    101c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    101e:	e1 e8       	ldi	r30, 0x81	; 129
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1024:	80 81       	ld	r24, Z
    1026:	82 60       	ori	r24, 0x02	; 2
    1028:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    102a:	80 81       	ld	r24, Z
    102c:	81 60       	ori	r24, 0x01	; 1
    102e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1030:	e0 e8       	ldi	r30, 0x80	; 128
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	81 60       	ori	r24, 0x01	; 1
    1038:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    103a:	e1 eb       	ldi	r30, 0xB1	; 177
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	84 60       	ori	r24, 0x04	; 4
    1042:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1044:	e0 eb       	ldi	r30, 0xB0	; 176
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	81 60       	ori	r24, 0x01	; 1
    104c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    104e:	ea e7       	ldi	r30, 0x7A	; 122
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	84 60       	ori	r24, 0x04	; 4
    1056:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1058:	80 81       	ld	r24, Z
    105a:	82 60       	ori	r24, 0x02	; 2
    105c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    105e:	80 81       	ld	r24, Z
    1060:	81 60       	ori	r24, 0x01	; 1
    1062:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1064:	80 81       	ld	r24, Z
    1066:	80 68       	ori	r24, 0x80	; 128
    1068:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    106a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    106e:	08 95       	ret

00001070 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	81 f0       	breq	.+32     	; 0x1094 <turnOffPWM+0x24>
    1074:	28 f4       	brcc	.+10     	; 0x1080 <turnOffPWM+0x10>
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	99 f0       	breq	.+38     	; 0x10a0 <turnOffPWM+0x30>
    107a:	82 30       	cpi	r24, 0x02	; 2
    107c:	a1 f0       	breq	.+40     	; 0x10a6 <turnOffPWM+0x36>
    107e:	08 95       	ret
    1080:	87 30       	cpi	r24, 0x07	; 7
    1082:	a9 f0       	breq	.+42     	; 0x10ae <turnOffPWM+0x3e>
    1084:	88 30       	cpi	r24, 0x08	; 8
    1086:	b9 f0       	breq	.+46     	; 0x10b6 <turnOffPWM+0x46>
    1088:	84 30       	cpi	r24, 0x04	; 4
    108a:	d1 f4       	brne	.+52     	; 0x10c0 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    108c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1090:	8f 7d       	andi	r24, 0xDF	; 223
    1092:	03 c0       	rjmp	.+6      	; 0x109a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1094:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1098:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    109a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    109e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    10a0:	84 b5       	in	r24, 0x24	; 36
    10a2:	8f 77       	andi	r24, 0x7F	; 127
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    10a6:	84 b5       	in	r24, 0x24	; 36
    10a8:	8f 7d       	andi	r24, 0xDF	; 223
    10aa:	84 bd       	out	0x24, r24	; 36
    10ac:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    10ae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    10b2:	8f 77       	andi	r24, 0x7F	; 127
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    10b6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    10ba:	8f 7d       	andi	r24, 0xDF	; 223
    10bc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    10c0:	08 95       	ret

000010c2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	fc 01       	movw	r30, r24
    10ca:	e4 58       	subi	r30, 0x84	; 132
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    10d0:	fc 01       	movw	r30, r24
    10d2:	e0 57       	subi	r30, 0x70	; 112
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    10d8:	88 23       	and	r24, r24
    10da:	61 f1       	breq	.+88     	; 0x1134 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	fc 01       	movw	r30, r24
    10e4:	e8 54       	subi	r30, 0x48	; 72
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	c5 91       	lpm	r28, Z+
    10ea:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    10ec:	fc 01       	movw	r30, r24
    10ee:	e2 55       	subi	r30, 0x52	; 82
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	a5 91       	lpm	r26, Z+
    10f4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    10f6:	61 11       	cpse	r22, r1
    10f8:	09 c0       	rjmp	.+18     	; 0x110c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    10fa:	9f b7       	in	r25, 0x3f	; 63
                cli();
    10fc:	f8 94       	cli
		*reg &= ~bit;
    10fe:	88 81       	ld	r24, Y
    1100:	20 95       	com	r18
    1102:	82 23       	and	r24, r18
    1104:	88 83       	st	Y, r24
		*out &= ~bit;
    1106:	ec 91       	ld	r30, X
    1108:	2e 23       	and	r18, r30
    110a:	0b c0       	rjmp	.+22     	; 0x1122 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    110c:	62 30       	cpi	r22, 0x02	; 2
    110e:	61 f4       	brne	.+24     	; 0x1128 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1110:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1112:	f8 94       	cli
		*reg &= ~bit;
    1114:	88 81       	ld	r24, Y
    1116:	32 2f       	mov	r19, r18
    1118:	30 95       	com	r19
    111a:	83 23       	and	r24, r19
    111c:	88 83       	st	Y, r24
		*out |= bit;
    111e:	ec 91       	ld	r30, X
    1120:	2e 2b       	or	r18, r30
    1122:	2c 93       	st	X, r18
		SREG = oldSREG;
    1124:	9f bf       	out	0x3f, r25	; 63
    1126:	06 c0       	rjmp	.+12     	; 0x1134 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1128:	8f b7       	in	r24, 0x3f	; 63
                cli();
    112a:	f8 94       	cli
		*reg |= bit;
    112c:	e8 81       	ld	r30, Y
    112e:	2e 2b       	or	r18, r30
    1130:	28 83       	st	Y, r18
		SREG = oldSREG;
    1132:	8f bf       	out	0x3f, r24	; 63
	}
}
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	08 95       	ret

0000113a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	f9 01       	movw	r30, r18
    1146:	e8 59       	subi	r30, 0x98	; 152
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    114c:	f9 01       	movw	r30, r18
    114e:	e4 58       	subi	r30, 0x84	; 132
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1154:	f9 01       	movw	r30, r18
    1156:	e0 57       	subi	r30, 0x70	; 112
    1158:	ff 4f       	sbci	r31, 0xFF	; 255
    115a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    115c:	cc 23       	and	r28, r28
    115e:	c1 f0       	breq	.+48     	; 0x1190 <digitalWrite+0x56>
    1160:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1162:	81 11       	cpse	r24, r1
    1164:	0e 94 38 08 	call	0x1070	; 0x1070 <turnOffPWM>

	out = portOutputRegister(port);
    1168:	ec 2f       	mov	r30, r28
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	ee 0f       	add	r30, r30
    116e:	ff 1f       	adc	r31, r31
    1170:	e2 55       	subi	r30, 0x52	; 82
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	a5 91       	lpm	r26, Z+
    1176:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1178:	9f b7       	in	r25, 0x3f	; 63
	cli();
    117a:	f8 94       	cli

	if (val == LOW) {
    117c:	11 11       	cpse	r17, r1
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <digitalWrite+0x4e>
		*out &= ~bit;
    1180:	8c 91       	ld	r24, X
    1182:	d0 95       	com	r29
    1184:	d8 23       	and	r29, r24
    1186:	02 c0       	rjmp	.+4      	; 0x118c <digitalWrite+0x52>
	} else {
		*out |= bit;
    1188:	ec 91       	ld	r30, X
    118a:	de 2b       	or	r29, r30
    118c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    118e:	9f bf       	out	0x3f, r25	; 63
}
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	08 95       	ret

00001198 <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	fc 01       	movw	r30, r24
    11a0:	e4 58       	subi	r30, 0x84	; 132
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
    11a6:	fc 01       	movw	r30, r24
    11a8:	e0 57       	subi	r30, 0x70	; 112
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	e4 91       	lpm	r30, Z
	uint8_t stateMask = (state ? bit : 0);
    11ae:	66 23       	and	r22, r22
    11b0:	11 f0       	breq	.+4      	; 0x11b6 <pulseIn+0x1e>
    11b2:	67 2f       	mov	r22, r23
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <pulseIn+0x20>
    11b6:	60 e0       	ldi	r22, 0x00	; 0

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	ec 55       	subi	r30, 0x5C	; 92
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	85 91       	lpm	r24, Z+
    11c4:	94 91       	lpm	r25, Z
    11c6:	89 01       	movw	r16, r18
    11c8:	9a 01       	movw	r18, r20
    11ca:	3f 70       	andi	r19, 0x0F	; 15
    11cc:	46 2f       	mov	r20, r22
    11ce:	67 2f       	mov	r22, r23
    11d0:	0e 94 8c 00 	call	0x118	; 0x118 <countPulseASM>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
    11d4:	61 15       	cp	r22, r1
    11d6:	71 05       	cpc	r23, r1
    11d8:	81 05       	cpc	r24, r1
    11da:	91 05       	cpc	r25, r1
    11dc:	49 f0       	breq	.+18     	; 0x11f0 <pulseIn+0x58>
		return clockCyclesToMicroseconds(width * 16 + 16);
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	a1 1d       	adc	r26, r1
    11e6:	b1 1d       	adc	r27, r1
    11e8:	bc 01       	movw	r22, r24
    11ea:	cd 01       	movw	r24, r26
    11ec:	9f 70       	andi	r25, 0x0F	; 15
    11ee:	03 c0       	rjmp	.+6      	; 0x11f6 <pulseIn+0x5e>
	else
		return 0;
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	cb 01       	movw	r24, r22
}
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	08 95       	ret

000011fc <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    11fc:	08 95       	ret

000011fe <__divsf3>:
    11fe:	0e 94 13 09 	call	0x1226	; 0x1226 <__divsf3x>
    1202:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_round>
    1206:	0e 94 1d 03 	call	0x63a	; 0x63a <__fp_pscB>
    120a:	58 f0       	brcs	.+22     	; 0x1222 <__divsf3+0x24>
    120c:	0e 94 16 03 	call	0x62c	; 0x62c <__fp_pscA>
    1210:	40 f0       	brcs	.+16     	; 0x1222 <__divsf3+0x24>
    1212:	29 f4       	brne	.+10     	; 0x121e <__divsf3+0x20>
    1214:	5f 3f       	cpi	r21, 0xFF	; 255
    1216:	29 f0       	breq	.+10     	; 0x1222 <__divsf3+0x24>
    1218:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_inf>
    121c:	51 11       	cpse	r21, r1
    121e:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_szero>
    1222:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_nan>

00001226 <__divsf3x>:
    1226:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_split3>
    122a:	68 f3       	brcs	.-38     	; 0x1206 <__divsf3+0x8>

0000122c <__divsf3_pse>:
    122c:	99 23       	and	r25, r25
    122e:	b1 f3       	breq	.-20     	; 0x121c <__divsf3+0x1e>
    1230:	55 23       	and	r21, r21
    1232:	91 f3       	breq	.-28     	; 0x1218 <__divsf3+0x1a>
    1234:	95 1b       	sub	r25, r21
    1236:	55 0b       	sbc	r21, r21
    1238:	bb 27       	eor	r27, r27
    123a:	aa 27       	eor	r26, r26
    123c:	62 17       	cp	r22, r18
    123e:	73 07       	cpc	r23, r19
    1240:	84 07       	cpc	r24, r20
    1242:	38 f0       	brcs	.+14     	; 0x1252 <__divsf3_pse+0x26>
    1244:	9f 5f       	subi	r25, 0xFF	; 255
    1246:	5f 4f       	sbci	r21, 0xFF	; 255
    1248:	22 0f       	add	r18, r18
    124a:	33 1f       	adc	r19, r19
    124c:	44 1f       	adc	r20, r20
    124e:	aa 1f       	adc	r26, r26
    1250:	a9 f3       	breq	.-22     	; 0x123c <__divsf3_pse+0x10>
    1252:	35 d0       	rcall	.+106    	; 0x12be <__divsf3_pse+0x92>
    1254:	0e 2e       	mov	r0, r30
    1256:	3a f0       	brmi	.+14     	; 0x1266 <__divsf3_pse+0x3a>
    1258:	e0 e8       	ldi	r30, 0x80	; 128
    125a:	32 d0       	rcall	.+100    	; 0x12c0 <__divsf3_pse+0x94>
    125c:	91 50       	subi	r25, 0x01	; 1
    125e:	50 40       	sbci	r21, 0x00	; 0
    1260:	e6 95       	lsr	r30
    1262:	00 1c       	adc	r0, r0
    1264:	ca f7       	brpl	.-14     	; 0x1258 <__divsf3_pse+0x2c>
    1266:	2b d0       	rcall	.+86     	; 0x12be <__divsf3_pse+0x92>
    1268:	fe 2f       	mov	r31, r30
    126a:	29 d0       	rcall	.+82     	; 0x12be <__divsf3_pse+0x92>
    126c:	66 0f       	add	r22, r22
    126e:	77 1f       	adc	r23, r23
    1270:	88 1f       	adc	r24, r24
    1272:	bb 1f       	adc	r27, r27
    1274:	26 17       	cp	r18, r22
    1276:	37 07       	cpc	r19, r23
    1278:	48 07       	cpc	r20, r24
    127a:	ab 07       	cpc	r26, r27
    127c:	b0 e8       	ldi	r27, 0x80	; 128
    127e:	09 f0       	breq	.+2      	; 0x1282 <__divsf3_pse+0x56>
    1280:	bb 0b       	sbc	r27, r27
    1282:	80 2d       	mov	r24, r0
    1284:	bf 01       	movw	r22, r30
    1286:	ff 27       	eor	r31, r31
    1288:	93 58       	subi	r25, 0x83	; 131
    128a:	5f 4f       	sbci	r21, 0xFF	; 255
    128c:	3a f0       	brmi	.+14     	; 0x129c <__divsf3_pse+0x70>
    128e:	9e 3f       	cpi	r25, 0xFE	; 254
    1290:	51 05       	cpc	r21, r1
    1292:	78 f0       	brcs	.+30     	; 0x12b2 <__divsf3_pse+0x86>
    1294:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_inf>
    1298:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_szero>
    129c:	5f 3f       	cpi	r21, 0xFF	; 255
    129e:	e4 f3       	brlt	.-8      	; 0x1298 <__divsf3_pse+0x6c>
    12a0:	98 3e       	cpi	r25, 0xE8	; 232
    12a2:	d4 f3       	brlt	.-12     	; 0x1298 <__divsf3_pse+0x6c>
    12a4:	86 95       	lsr	r24
    12a6:	77 95       	ror	r23
    12a8:	67 95       	ror	r22
    12aa:	b7 95       	ror	r27
    12ac:	f7 95       	ror	r31
    12ae:	9f 5f       	subi	r25, 0xFF	; 255
    12b0:	c9 f7       	brne	.-14     	; 0x12a4 <__divsf3_pse+0x78>
    12b2:	88 0f       	add	r24, r24
    12b4:	91 1d       	adc	r25, r1
    12b6:	96 95       	lsr	r25
    12b8:	87 95       	ror	r24
    12ba:	97 f9       	bld	r25, 7
    12bc:	08 95       	ret
    12be:	e1 e0       	ldi	r30, 0x01	; 1
    12c0:	66 0f       	add	r22, r22
    12c2:	77 1f       	adc	r23, r23
    12c4:	88 1f       	adc	r24, r24
    12c6:	bb 1f       	adc	r27, r27
    12c8:	62 17       	cp	r22, r18
    12ca:	73 07       	cpc	r23, r19
    12cc:	84 07       	cpc	r24, r20
    12ce:	ba 07       	cpc	r27, r26
    12d0:	20 f0       	brcs	.+8      	; 0x12da <__divsf3_pse+0xae>
    12d2:	62 1b       	sub	r22, r18
    12d4:	73 0b       	sbc	r23, r19
    12d6:	84 0b       	sbc	r24, r20
    12d8:	ba 0b       	sbc	r27, r26
    12da:	ee 1f       	adc	r30, r30
    12dc:	88 f7       	brcc	.-30     	; 0x12c0 <__divsf3_pse+0x94>
    12de:	e0 95       	com	r30
    12e0:	08 95       	ret

000012e2 <__fixunssfsi>:
    12e2:	0e 94 3d 03 	call	0x67a	; 0x67a <__fp_splitA>
    12e6:	88 f0       	brcs	.+34     	; 0x130a <__fixunssfsi+0x28>
    12e8:	9f 57       	subi	r25, 0x7F	; 127
    12ea:	98 f0       	brcs	.+38     	; 0x1312 <__fixunssfsi+0x30>
    12ec:	b9 2f       	mov	r27, r25
    12ee:	99 27       	eor	r25, r25
    12f0:	b7 51       	subi	r27, 0x17	; 23
    12f2:	b0 f0       	brcs	.+44     	; 0x1320 <__fixunssfsi+0x3e>
    12f4:	e1 f0       	breq	.+56     	; 0x132e <__fixunssfsi+0x4c>
    12f6:	66 0f       	add	r22, r22
    12f8:	77 1f       	adc	r23, r23
    12fa:	88 1f       	adc	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	1a f0       	brmi	.+6      	; 0x1306 <__fixunssfsi+0x24>
    1300:	ba 95       	dec	r27
    1302:	c9 f7       	brne	.-14     	; 0x12f6 <__fixunssfsi+0x14>
    1304:	14 c0       	rjmp	.+40     	; 0x132e <__fixunssfsi+0x4c>
    1306:	b1 30       	cpi	r27, 0x01	; 1
    1308:	91 f0       	breq	.+36     	; 0x132e <__fixunssfsi+0x4c>
    130a:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fp_zero>
    130e:	b1 e0       	ldi	r27, 0x01	; 1
    1310:	08 95       	ret
    1312:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__fp_zero>
    1316:	67 2f       	mov	r22, r23
    1318:	78 2f       	mov	r23, r24
    131a:	88 27       	eor	r24, r24
    131c:	b8 5f       	subi	r27, 0xF8	; 248
    131e:	39 f0       	breq	.+14     	; 0x132e <__fixunssfsi+0x4c>
    1320:	b9 3f       	cpi	r27, 0xF9	; 249
    1322:	cc f3       	brlt	.-14     	; 0x1316 <__fixunssfsi+0x34>
    1324:	86 95       	lsr	r24
    1326:	77 95       	ror	r23
    1328:	67 95       	ror	r22
    132a:	b3 95       	inc	r27
    132c:	d9 f7       	brne	.-10     	; 0x1324 <__fixunssfsi+0x42>
    132e:	3e f4       	brtc	.+14     	; 0x133e <__fixunssfsi+0x5c>
    1330:	90 95       	com	r25
    1332:	80 95       	com	r24
    1334:	70 95       	com	r23
    1336:	61 95       	neg	r22
    1338:	7f 4f       	sbci	r23, 0xFF	; 255
    133a:	8f 4f       	sbci	r24, 0xFF	; 255
    133c:	9f 4f       	sbci	r25, 0xFF	; 255
    133e:	08 95       	ret

00001340 <__unordsf2>:
    1340:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fp_cmp>
    1344:	88 0b       	sbc	r24, r24
    1346:	99 0b       	sbc	r25, r25
    1348:	08 95       	ret

0000134a <__udivmodsi4>:
    134a:	a1 e2       	ldi	r26, 0x21	; 33
    134c:	1a 2e       	mov	r1, r26
    134e:	aa 1b       	sub	r26, r26
    1350:	bb 1b       	sub	r27, r27
    1352:	fd 01       	movw	r30, r26
    1354:	0d c0       	rjmp	.+26     	; 0x1370 <__udivmodsi4_ep>

00001356 <__udivmodsi4_loop>:
    1356:	aa 1f       	adc	r26, r26
    1358:	bb 1f       	adc	r27, r27
    135a:	ee 1f       	adc	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	a2 17       	cp	r26, r18
    1360:	b3 07       	cpc	r27, r19
    1362:	e4 07       	cpc	r30, r20
    1364:	f5 07       	cpc	r31, r21
    1366:	20 f0       	brcs	.+8      	; 0x1370 <__udivmodsi4_ep>
    1368:	a2 1b       	sub	r26, r18
    136a:	b3 0b       	sbc	r27, r19
    136c:	e4 0b       	sbc	r30, r20
    136e:	f5 0b       	sbc	r31, r21

00001370 <__udivmodsi4_ep>:
    1370:	66 1f       	adc	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	1a 94       	dec	r1
    137a:	69 f7       	brne	.-38     	; 0x1356 <__udivmodsi4_loop>
    137c:	60 95       	com	r22
    137e:	70 95       	com	r23
    1380:	80 95       	com	r24
    1382:	90 95       	com	r25
    1384:	9b 01       	movw	r18, r22
    1386:	ac 01       	movw	r20, r24
    1388:	bd 01       	movw	r22, r26
    138a:	cf 01       	movw	r24, r30
    138c:	08 95       	ret

0000138e <__tablejump2__>:
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	05 90       	lpm	r0, Z+
    1394:	f4 91       	lpm	r31, Z
    1396:	e0 2d       	mov	r30, r0
    1398:	09 94       	ijmp

0000139a <_exit>:
    139a:	f8 94       	cli

0000139c <__stop_program>:
    139c:	ff cf       	rjmp	.-2      	; 0x139c <__stop_program>
