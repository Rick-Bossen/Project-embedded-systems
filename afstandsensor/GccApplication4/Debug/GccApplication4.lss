
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000416  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  0000048a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ef  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000711  00000000  00000000  00000e23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000342  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001878  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fa  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f4  00000000  00000000  00001d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002016  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 31       	cpi	r26, 0x10	; 16
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 00 	call	0xda	; 0xda <main>
  88:	0c 94 09 02 	jmp	0x412	; 0x412 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <meetAfstand>:
	_delay_ms(500);
}
//functie om de afstand sensor te besturen, de waarde uit te lezen, en de afstant te berekenen
double meetAfstand(){
	// Om zeker te zijn dat triggerPin LOW is.
	PORTB = 0b00000000;
  90:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	83 ef       	ldi	r24, 0xF3	; 243
  94:	91 e0       	ldi	r25, 0x01	; 1
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <meetAfstand+0x6>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <meetAfstand+0xc>
  9c:	00 00       	nop
	_delay_ms(2);
	// Hou de trigger 10 microseconden in, dit is het signaal om de sensor te laaten meten.
	PORTB = 0b00010000;
  9e:	80 e1       	ldi	r24, 0x10	; 16
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	83 ec       	ldi	r24, 0xC3	; 195
  a4:	99 e0       	ldi	r25, 0x09	; 9
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <meetAfstand+0x16>
  aa:	00 c0       	rjmp	.+0      	; 0xac <meetAfstand+0x1c>
  ac:	00 00       	nop
	_delay_ms(10);
	PORTB = 0b00000000;
  ae:	15 b8       	out	0x05, r1	; 5
	// lezen van de tijd en het berekenen van de aftand
	durationMicroSec = pulseIN();
  b0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  b4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  b8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
  bc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
	distanceCm = durationMicroSec / 2.0 * 0.0343;
  c0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <distanceCm>
  c4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <distanceCm+0x1>
  c8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <distanceCm+0x2>
  cc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <distanceCm+0x3>
		return(-1.0) ;
	}
	else {
		return(distanceCm);
	}
}
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	80 e8       	ldi	r24, 0x80	; 128
  d6:	9f eb       	ldi	r25, 0xBF	; 191
  d8:	08 95       	ret

000000da <main>:
double meet2 = 0.0;

//variabelen voor de functie meetAfstand()
double distanceCm = 0.0;
unsigned long durationMicroSec = 0;
int main (void){
  da:	8f 92       	push	r8
  dc:	9f 92       	push	r9
  de:	af 92       	push	r10
  e0:	bf 92       	push	r11
  e2:	cf 92       	push	r12
  e4:	df 92       	push	r13
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
// pinnen declareren
DDRD = 0b00111000;
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	8a b9       	out	0x0a, r24	; 10
DDRB = 0b00100000;
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	84 b9       	out	0x04, r24	; 4

	meet1 = meetAfstand();
  f2:	0e 94 48 00 	call	0x90	; 0x90 <meetAfstand>
  f6:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <meet1>
  fa:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <meet1+0x1>
  fe:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <meet1+0x2>
 102:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <meet1+0x3>
 106:	2f e7       	ldi	r18, 0x7F	; 127
 108:	8a e1       	ldi	r24, 0x1A	; 26
 10a:	96 e0       	ldi	r25, 0x06	; 6
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x32>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x3c>
 116:	00 00       	nop
	_delay_ms(2000);
	meet2 = meetAfstand();
 118:	0e 94 48 00 	call	0x90	; 0x90 <meetAfstand>
 11c:	6b 01       	movw	r12, r22
 11e:	7c 01       	movw	r14, r24
 120:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <meet2>
 124:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <meet2+0x1>
 128:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <meet2+0x2>
 12c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <meet2+0x3>

	// er is geen foute waarde gevonden
	if(meet1 != -1 && meet2 != -1){
 130:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <meet1>
 134:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <meet1+0x1>
 138:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <meet1+0x2>
 13c:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <meet1+0x3>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	40 e8       	ldi	r20, 0x80	; 128
 146:	5f eb       	ldi	r21, 0xBF	; 191
 148:	c5 01       	movw	r24, r10
 14a:	b4 01       	movw	r22, r8
 14c:	0e 94 8a 01 	call	0x314	; 0x314 <__cmpsf2>
 150:	88 23       	and	r24, r24
 152:	09 f4       	brne	.+2      	; 0x156 <main+0x7c>
 154:	5e c0       	rjmp	.+188    	; 0x212 <main+0x138>
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	40 e8       	ldi	r20, 0x80	; 128
 15c:	5f eb       	ldi	r21, 0xBF	; 191
 15e:	c7 01       	movw	r24, r14
 160:	b6 01       	movw	r22, r12
 162:	0e 94 8a 01 	call	0x314	; 0x314 <__cmpsf2>
 166:	88 23       	and	r24, r24
 168:	09 f4       	brne	.+2      	; 0x16c <main+0x92>
 16a:	53 c0       	rjmp	.+166    	; 0x212 <main+0x138>
		return(distanceCm);
	}
}
//functie om te controleren of de waarden dicht bij elkaar liggen
int ongeveerGelijk(double var1,double var2){
	if(var1-2<var2&&var1+2>var2){
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	50 e4       	ldi	r21, 0x40	; 64
 174:	c5 01       	movw	r24, r10
 176:	b4 01       	movw	r22, r8
 178:	0e 94 1d 01 	call	0x23a	; 0x23a <__subsf3>
 17c:	9b 01       	movw	r18, r22
 17e:	ac 01       	movw	r20, r24
 180:	c7 01       	movw	r24, r14
 182:	b6 01       	movw	r22, r12
 184:	0e 94 04 02 	call	0x408	; 0x408 <__gesf2>
 188:	18 16       	cp	r1, r24
 18a:	7c f5       	brge	.+94     	; 0x1ea <main+0x110>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	50 e4       	ldi	r21, 0x40	; 64
 194:	c5 01       	movw	r24, r10
 196:	b4 01       	movw	r22, r8
 198:	0e 94 1e 01 	call	0x23c	; 0x23c <__addsf3>
 19c:	9b 01       	movw	r18, r22
 19e:	ac 01       	movw	r20, r24
 1a0:	c7 01       	movw	r24, r14
 1a2:	b6 01       	movw	r22, r12
 1a4:	0e 94 8a 01 	call	0x314	; 0x314 <__cmpsf2>
 1a8:	88 23       	and	r24, r24
 1aa:	fc f4       	brge	.+62     	; 0x1ea <main+0x110>
 1ac:	27 c0       	rjmp	.+78     	; 0x1fc <main+0x122>
	if(meet1 != -1 && meet2 != -1){
		//het luik beweegt
		if(!ongeveerGelijk(meet1,meet2)){
			if(meet1<meet2){
				//het luik gaat omhoog
				PORTD = 0b00110000;
 1ae:	80 e3       	ldi	r24, 0x30	; 48
 1b0:	8b b9       	out	0x0b, r24	; 11
 1b2:	2f c0       	rjmp	.+94     	; 0x212 <main+0x138>
			}
			else if(meet1<meet2){
 1b4:	a5 01       	movw	r20, r10
 1b6:	94 01       	movw	r18, r8
 1b8:	c7 01       	movw	r24, r14
 1ba:	b6 01       	movw	r22, r12
 1bc:	0e 94 04 02 	call	0x408	; 0x408 <__gesf2>
 1c0:	18 16       	cp	r1, r24
 1c2:	3c f5       	brge	.+78     	; 0x212 <main+0x138>
				//het luik gaat omlaag
				PORTD = 0b00011000;		
 1c4:	88 e1       	ldi	r24, 0x18	; 24
 1c6:	8b b9       	out	0x0b, r24	; 11
 1c8:	24 c0       	rjmp	.+72     	; 0x212 <main+0x138>
		}
		// het luik beweegt niet
		else{
			if(meet1<30){
				//het luik is omlaag
				PORTD = 0b00100000;
 1ca:	80 e2       	ldi	r24, 0x20	; 32
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	21 c0       	rjmp	.+66     	; 0x212 <main+0x138>
			}
			else if(meet1>120){
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 ef       	ldi	r20, 0xF0	; 240
 1d6:	52 e4       	ldi	r21, 0x42	; 66
 1d8:	c5 01       	movw	r24, r10
 1da:	b4 01       	movw	r22, r8
 1dc:	0e 94 04 02 	call	0x408	; 0x408 <__gesf2>
 1e0:	18 16       	cp	r1, r24
 1e2:	bc f4       	brge	.+46     	; 0x212 <main+0x138>
				//het luik is omhoog
				PORTD = 0b00001000;
 1e4:	88 e0       	ldi	r24, 0x08	; 8
 1e6:	8b b9       	out	0x0b, r24	; 11
 1e8:	14 c0       	rjmp	.+40     	; 0x212 <main+0x138>

	// er is geen foute waarde gevonden
	if(meet1 != -1 && meet2 != -1){
		//het luik beweegt
		if(!ongeveerGelijk(meet1,meet2)){
			if(meet1<meet2){
 1ea:	a5 01       	movw	r20, r10
 1ec:	94 01       	movw	r18, r8
 1ee:	c7 01       	movw	r24, r14
 1f0:	b6 01       	movw	r22, r12
 1f2:	0e 94 04 02 	call	0x408	; 0x408 <__gesf2>
 1f6:	18 16       	cp	r1, r24
 1f8:	ec f6       	brge	.-70     	; 0x1b4 <main+0xda>
 1fa:	d9 cf       	rjmp	.-78     	; 0x1ae <main+0xd4>
				PORTD = 0b00011000;		
			}
		}
		// het luik beweegt niet
		else{
			if(meet1<30){
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 ef       	ldi	r20, 0xF0	; 240
 202:	51 e4       	ldi	r21, 0x41	; 65
 204:	c5 01       	movw	r24, r10
 206:	b4 01       	movw	r22, r8
 208:	0e 94 8a 01 	call	0x314	; 0x314 <__cmpsf2>
 20c:	88 23       	and	r24, r24
 20e:	04 f7       	brge	.-64     	; 0x1d0 <main+0xf6>
 210:	dc cf       	rjmp	.-72     	; 0x1ca <main+0xf0>
 212:	2f e9       	ldi	r18, 0x9F	; 159
 214:	86 e8       	ldi	r24, 0x86	; 134
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x13e>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x148>
 222:	00 00       	nop
			}
		}

	}
	_delay_ms(500);
}
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	bf 90       	pop	r11
 232:	af 90       	pop	r10
 234:	9f 90       	pop	r9
 236:	8f 90       	pop	r8
 238:	08 95       	ret

0000023a <__subsf3>:
 23a:	50 58       	subi	r21, 0x80	; 128

0000023c <__addsf3>:
 23c:	bb 27       	eor	r27, r27
 23e:	aa 27       	eor	r26, r26
 240:	0e 94 35 01 	call	0x26a	; 0x26a <__addsf3x>
 244:	0c 94 ca 01 	jmp	0x394	; 0x394 <__fp_round>
 248:	0e 94 bc 01 	call	0x378	; 0x378 <__fp_pscA>
 24c:	38 f0       	brcs	.+14     	; 0x25c <__addsf3+0x20>
 24e:	0e 94 c3 01 	call	0x386	; 0x386 <__fp_pscB>
 252:	20 f0       	brcs	.+8      	; 0x25c <__addsf3+0x20>
 254:	39 f4       	brne	.+14     	; 0x264 <__addsf3+0x28>
 256:	9f 3f       	cpi	r25, 0xFF	; 255
 258:	19 f4       	brne	.+6      	; 0x260 <__addsf3+0x24>
 25a:	26 f4       	brtc	.+8      	; 0x264 <__addsf3+0x28>
 25c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__fp_nan>
 260:	0e f4       	brtc	.+2      	; 0x264 <__addsf3+0x28>
 262:	e0 95       	com	r30
 264:	e7 fb       	bst	r30, 7
 266:	0c 94 b3 01 	jmp	0x366	; 0x366 <__fp_inf>

0000026a <__addsf3x>:
 26a:	e9 2f       	mov	r30, r25
 26c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__fp_split3>
 270:	58 f3       	brcs	.-42     	; 0x248 <__addsf3+0xc>
 272:	ba 17       	cp	r27, r26
 274:	62 07       	cpc	r22, r18
 276:	73 07       	cpc	r23, r19
 278:	84 07       	cpc	r24, r20
 27a:	95 07       	cpc	r25, r21
 27c:	20 f0       	brcs	.+8      	; 0x286 <__addsf3x+0x1c>
 27e:	79 f4       	brne	.+30     	; 0x29e <__addsf3x+0x34>
 280:	a6 f5       	brtc	.+104    	; 0x2ea <__addsf3x+0x80>
 282:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__fp_zero>
 286:	0e f4       	brtc	.+2      	; 0x28a <__addsf3x+0x20>
 288:	e0 95       	com	r30
 28a:	0b 2e       	mov	r0, r27
 28c:	ba 2f       	mov	r27, r26
 28e:	a0 2d       	mov	r26, r0
 290:	0b 01       	movw	r0, r22
 292:	b9 01       	movw	r22, r18
 294:	90 01       	movw	r18, r0
 296:	0c 01       	movw	r0, r24
 298:	ca 01       	movw	r24, r20
 29a:	a0 01       	movw	r20, r0
 29c:	11 24       	eor	r1, r1
 29e:	ff 27       	eor	r31, r31
 2a0:	59 1b       	sub	r21, r25
 2a2:	99 f0       	breq	.+38     	; 0x2ca <__addsf3x+0x60>
 2a4:	59 3f       	cpi	r21, 0xF9	; 249
 2a6:	50 f4       	brcc	.+20     	; 0x2bc <__addsf3x+0x52>
 2a8:	50 3e       	cpi	r21, 0xE0	; 224
 2aa:	68 f1       	brcs	.+90     	; 0x306 <__addsf3x+0x9c>
 2ac:	1a 16       	cp	r1, r26
 2ae:	f0 40       	sbci	r31, 0x00	; 0
 2b0:	a2 2f       	mov	r26, r18
 2b2:	23 2f       	mov	r18, r19
 2b4:	34 2f       	mov	r19, r20
 2b6:	44 27       	eor	r20, r20
 2b8:	58 5f       	subi	r21, 0xF8	; 248
 2ba:	f3 cf       	rjmp	.-26     	; 0x2a2 <__addsf3x+0x38>
 2bc:	46 95       	lsr	r20
 2be:	37 95       	ror	r19
 2c0:	27 95       	ror	r18
 2c2:	a7 95       	ror	r26
 2c4:	f0 40       	sbci	r31, 0x00	; 0
 2c6:	53 95       	inc	r21
 2c8:	c9 f7       	brne	.-14     	; 0x2bc <__addsf3x+0x52>
 2ca:	7e f4       	brtc	.+30     	; 0x2ea <__addsf3x+0x80>
 2cc:	1f 16       	cp	r1, r31
 2ce:	ba 0b       	sbc	r27, r26
 2d0:	62 0b       	sbc	r22, r18
 2d2:	73 0b       	sbc	r23, r19
 2d4:	84 0b       	sbc	r24, r20
 2d6:	ba f0       	brmi	.+46     	; 0x306 <__addsf3x+0x9c>
 2d8:	91 50       	subi	r25, 0x01	; 1
 2da:	a1 f0       	breq	.+40     	; 0x304 <__addsf3x+0x9a>
 2dc:	ff 0f       	add	r31, r31
 2de:	bb 1f       	adc	r27, r27
 2e0:	66 1f       	adc	r22, r22
 2e2:	77 1f       	adc	r23, r23
 2e4:	88 1f       	adc	r24, r24
 2e6:	c2 f7       	brpl	.-16     	; 0x2d8 <__addsf3x+0x6e>
 2e8:	0e c0       	rjmp	.+28     	; 0x306 <__addsf3x+0x9c>
 2ea:	ba 0f       	add	r27, r26
 2ec:	62 1f       	adc	r22, r18
 2ee:	73 1f       	adc	r23, r19
 2f0:	84 1f       	adc	r24, r20
 2f2:	48 f4       	brcc	.+18     	; 0x306 <__addsf3x+0x9c>
 2f4:	87 95       	ror	r24
 2f6:	77 95       	ror	r23
 2f8:	67 95       	ror	r22
 2fa:	b7 95       	ror	r27
 2fc:	f7 95       	ror	r31
 2fe:	9e 3f       	cpi	r25, 0xFE	; 254
 300:	08 f0       	brcs	.+2      	; 0x304 <__addsf3x+0x9a>
 302:	b0 cf       	rjmp	.-160    	; 0x264 <__addsf3+0x28>
 304:	93 95       	inc	r25
 306:	88 0f       	add	r24, r24
 308:	08 f0       	brcs	.+2      	; 0x30c <__addsf3x+0xa2>
 30a:	99 27       	eor	r25, r25
 30c:	ee 0f       	add	r30, r30
 30e:	97 95       	ror	r25
 310:	87 95       	ror	r24
 312:	08 95       	ret

00000314 <__cmpsf2>:
 314:	0e 94 8f 01 	call	0x31e	; 0x31e <__fp_cmp>
 318:	08 f4       	brcc	.+2      	; 0x31c <__cmpsf2+0x8>
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	08 95       	ret

0000031e <__fp_cmp>:
 31e:	99 0f       	add	r25, r25
 320:	00 08       	sbc	r0, r0
 322:	55 0f       	add	r21, r21
 324:	aa 0b       	sbc	r26, r26
 326:	e0 e8       	ldi	r30, 0x80	; 128
 328:	fe ef       	ldi	r31, 0xFE	; 254
 32a:	16 16       	cp	r1, r22
 32c:	17 06       	cpc	r1, r23
 32e:	e8 07       	cpc	r30, r24
 330:	f9 07       	cpc	r31, r25
 332:	c0 f0       	brcs	.+48     	; 0x364 <__fp_cmp+0x46>
 334:	12 16       	cp	r1, r18
 336:	13 06       	cpc	r1, r19
 338:	e4 07       	cpc	r30, r20
 33a:	f5 07       	cpc	r31, r21
 33c:	98 f0       	brcs	.+38     	; 0x364 <__fp_cmp+0x46>
 33e:	62 1b       	sub	r22, r18
 340:	73 0b       	sbc	r23, r19
 342:	84 0b       	sbc	r24, r20
 344:	95 0b       	sbc	r25, r21
 346:	39 f4       	brne	.+14     	; 0x356 <__fp_cmp+0x38>
 348:	0a 26       	eor	r0, r26
 34a:	61 f0       	breq	.+24     	; 0x364 <__fp_cmp+0x46>
 34c:	23 2b       	or	r18, r19
 34e:	24 2b       	or	r18, r20
 350:	25 2b       	or	r18, r21
 352:	21 f4       	brne	.+8      	; 0x35c <__fp_cmp+0x3e>
 354:	08 95       	ret
 356:	0a 26       	eor	r0, r26
 358:	09 f4       	brne	.+2      	; 0x35c <__fp_cmp+0x3e>
 35a:	a1 40       	sbci	r26, 0x01	; 1
 35c:	a6 95       	lsr	r26
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	81 1d       	adc	r24, r1
 362:	81 1d       	adc	r24, r1
 364:	08 95       	ret

00000366 <__fp_inf>:
 366:	97 f9       	bld	r25, 7
 368:	9f 67       	ori	r25, 0x7F	; 127
 36a:	80 e8       	ldi	r24, 0x80	; 128
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	08 95       	ret

00000372 <__fp_nan>:
 372:	9f ef       	ldi	r25, 0xFF	; 255
 374:	80 ec       	ldi	r24, 0xC0	; 192
 376:	08 95       	ret

00000378 <__fp_pscA>:
 378:	00 24       	eor	r0, r0
 37a:	0a 94       	dec	r0
 37c:	16 16       	cp	r1, r22
 37e:	17 06       	cpc	r1, r23
 380:	18 06       	cpc	r1, r24
 382:	09 06       	cpc	r0, r25
 384:	08 95       	ret

00000386 <__fp_pscB>:
 386:	00 24       	eor	r0, r0
 388:	0a 94       	dec	r0
 38a:	12 16       	cp	r1, r18
 38c:	13 06       	cpc	r1, r19
 38e:	14 06       	cpc	r1, r20
 390:	05 06       	cpc	r0, r21
 392:	08 95       	ret

00000394 <__fp_round>:
 394:	09 2e       	mov	r0, r25
 396:	03 94       	inc	r0
 398:	00 0c       	add	r0, r0
 39a:	11 f4       	brne	.+4      	; 0x3a0 <__fp_round+0xc>
 39c:	88 23       	and	r24, r24
 39e:	52 f0       	brmi	.+20     	; 0x3b4 <__fp_round+0x20>
 3a0:	bb 0f       	add	r27, r27
 3a2:	40 f4       	brcc	.+16     	; 0x3b4 <__fp_round+0x20>
 3a4:	bf 2b       	or	r27, r31
 3a6:	11 f4       	brne	.+4      	; 0x3ac <__fp_round+0x18>
 3a8:	60 ff       	sbrs	r22, 0
 3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <__fp_round+0x20>
 3ac:	6f 5f       	subi	r22, 0xFF	; 255
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	8f 4f       	sbci	r24, 0xFF	; 255
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	08 95       	ret

000003b6 <__fp_split3>:
 3b6:	57 fd       	sbrc	r21, 7
 3b8:	90 58       	subi	r25, 0x80	; 128
 3ba:	44 0f       	add	r20, r20
 3bc:	55 1f       	adc	r21, r21
 3be:	59 f0       	breq	.+22     	; 0x3d6 <__fp_splitA+0x10>
 3c0:	5f 3f       	cpi	r21, 0xFF	; 255
 3c2:	71 f0       	breq	.+28     	; 0x3e0 <__fp_splitA+0x1a>
 3c4:	47 95       	ror	r20

000003c6 <__fp_splitA>:
 3c6:	88 0f       	add	r24, r24
 3c8:	97 fb       	bst	r25, 7
 3ca:	99 1f       	adc	r25, r25
 3cc:	61 f0       	breq	.+24     	; 0x3e6 <__fp_splitA+0x20>
 3ce:	9f 3f       	cpi	r25, 0xFF	; 255
 3d0:	79 f0       	breq	.+30     	; 0x3f0 <__fp_splitA+0x2a>
 3d2:	87 95       	ror	r24
 3d4:	08 95       	ret
 3d6:	12 16       	cp	r1, r18
 3d8:	13 06       	cpc	r1, r19
 3da:	14 06       	cpc	r1, r20
 3dc:	55 1f       	adc	r21, r21
 3de:	f2 cf       	rjmp	.-28     	; 0x3c4 <__fp_split3+0xe>
 3e0:	46 95       	lsr	r20
 3e2:	f1 df       	rcall	.-30     	; 0x3c6 <__fp_splitA>
 3e4:	08 c0       	rjmp	.+16     	; 0x3f6 <__fp_splitA+0x30>
 3e6:	16 16       	cp	r1, r22
 3e8:	17 06       	cpc	r1, r23
 3ea:	18 06       	cpc	r1, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	f1 cf       	rjmp	.-30     	; 0x3d2 <__fp_splitA+0xc>
 3f0:	86 95       	lsr	r24
 3f2:	71 05       	cpc	r23, r1
 3f4:	61 05       	cpc	r22, r1
 3f6:	08 94       	sec
 3f8:	08 95       	ret

000003fa <__fp_zero>:
 3fa:	e8 94       	clt

000003fc <__fp_szero>:
 3fc:	bb 27       	eor	r27, r27
 3fe:	66 27       	eor	r22, r22
 400:	77 27       	eor	r23, r23
 402:	cb 01       	movw	r24, r22
 404:	97 f9       	bld	r25, 7
 406:	08 95       	ret

00000408 <__gesf2>:
 408:	0e 94 8f 01 	call	0x31e	; 0x31e <__fp_cmp>
 40c:	08 f4       	brcc	.+2      	; 0x410 <__gesf2+0x8>
 40e:	8f ef       	ldi	r24, 0xFF	; 255
 410:	08 95       	ret

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
